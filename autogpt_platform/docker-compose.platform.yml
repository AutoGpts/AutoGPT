services:
  migrate:
    build:
      context: ../
      dockerfile: autogpt_platform/backend/Dockerfile
      target: server
    command: ["sh", "-c", "poetry run prisma migrate deploy"]
    develop:
      watch:
        - path: ./
          target: autogpt_platform/backend/migrations
          action: rebuild
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?connect_timeout=60&schema=platform
    networks:
      - app-network
    restart: on-failure
    healthcheck:
      test: ["CMD", "poetry", "run", "prisma", "migrate", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  rest_server:
    build:
      context: ../
      dockerfile: autogpt_platform/backend/Dockerfile
      target: server
    command: ["python", "-m", "backend.rest"]
    develop:
      watch:
        - path: ./
          target: autogpt_platform/backend/
          action: rebuild
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    environment:
      - SUPABASE_URL=http://kong:8000
      - SUPABASE_JWT_SECRET=${JWT_SECRET}
      - SUPABASE_SERVICE_ROLE_KEY=${SERVICE_ROLE_KEY}
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?connect_timeout=60&schema=platform
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - ENABLE_AUTH=true
      - PYRO_HOST=0.0.0.0
      - EXECUTIONSCHEDULER_HOST=rest_server
      - EXECUTIONMANAGER_HOST=executor
      - FRONTEND_BASE_URL=${SITE_URL}
      - BACKEND_CORS_ALLOW_ORIGINS=["${SITE_URL}"]
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}  # DO NOT USE IN PRODUCTION!!
    ports:
      - "8006:8006"
      - "8003:8003" # execution scheduler
    networks:
      - app-network

  executor:
    build:
      context: ../
      dockerfile: autogpt_platform/backend/Dockerfile
      target: server
    command: ["python", "-m", "backend.exec"]
    develop:
      watch:
        - path: ./
          target: autogpt_platform/backend/
          action: rebuild
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    environment:
      - SUPABASE_URL=http://kong:${KONG_HTTP_PORT}
      - SUPABASE_JWT_SECRET=${JWT_SECRET}
      - SUPABASE_SERVICE_ROLE_KEY=${SERVICE_ROLE_KEY}
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?connect_timeout=60&schema=platform
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - ENABLE_AUTH=true
      - PYRO_HOST=0.0.0.0
      - AGENTSERVER_HOST=rest_server
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
    ports:
      - "8002:8000"
    networks:
      - app-network

  websocket_server:
    build:
      context: ../
      dockerfile: autogpt_platform/backend/Dockerfile
      target: server
    command: ["python", "-m", "backend.ws"]
    develop:
      watch:
        - path: ./
          target: autogpt_platform/backend/
          action: rebuild
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    environment:
      - SUPABASE_JWT_SECRET=${JWT_SECRET}
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?connect_timeout=60&schema=platform
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - ENABLE_AUTH=true
      - PYRO_HOST=0.0.0.0
      - BACKEND_CORS_ALLOW_ORIGINS=["${SITE_URL}"]

    ports:
      - "8001:8001"
    networks:
      - app-network


#  frontend:
#    build:
#      context: ../
#      dockerfile: autogpt_platform/frontend/Dockerfile
#      target: dev
#    depends_on:
#      db:
#        condition: service_healthy
#      rest_server:
#        condition: service_started
#      websocket_server:
#        condition: service_started
#      migrate:
#        condition: service_completed_successfully
#    environment:
#      - NEXT_PUBLIC_SUPABASE_URL=http://kong:8000
#      - NEXT_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyAgCiAgICAicm9sZSI6ICJhbm9uIiwKICAgICJpc3MiOiAic3VwYWJhc2UtZGVtbyIsCiAgICAiaWF0IjogMTY0MTc2OTIwMCwKICAgICJleHAiOiAxNzk5NTM1NjAwCn0.dc_X5iR_VP_qT0zsiyj_I_OZ2T9FtRU2BBNWN8Bu4GE
#      - DATABASE_URL=postgresql://agpt_user:pass123@postgres:5432/postgres?connect_timeout=60&schema=platform
#      - NEXT_PUBLIC_AGPT_SERVER_URL=http://localhost:8006/api
#      - NEXT_PUBLIC_AGPT_WS_SERVER_URL=ws://localhost:8001/ws
#      - NEXT_PUBLIC_AGPT_MARKETPLACE_URL=http://localhost:8015/api/v1/market
#      - NEXT_PUBLIC_BEHAVE_AS=LOCAL
#    ports:
#      - "3000:3000"
#    networks:
#      - app-network

networks:
  app-network:
    driver: bridge
