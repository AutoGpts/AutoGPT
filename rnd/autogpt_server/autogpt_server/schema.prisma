datasource db {
  provider = "sqlite"
  url      = "file:./database.db"
}

generator client {
  provider  = "prisma-client-py"
  interface = "asyncio"
}

// This model describe a single node in the Agent Graph/Flow (Multi Agent System).
model AgentNode {
  id String @id

  // This define the name or the id of the component that this node will execute.
  // I'm on the fence on whether to make AgentComponent a DB model,
  // since the list of the components will be hard-coded as the code anyway,
  // and we won't store code in the DB.
  //
  // --- This is how AgentComponent information should look like ---
  // model AgentComponent {
  //   id   String @id
  //   name String
  //   code String
  //   type String (Agent/Script)
  //   inputSchema  String
  //   outputSchema String 
  // }
  agentComponentId String

  parentNodeId String?
  ChildNodes   AgentNode[] @relation("AgentGraph")
  ParentNode   AgentNode?  @relation("AgentGraph", fields: [parentNodeId], references: [id])

  ExecutionHistory AgentNodeExecution[] @relation("AgentExecution")
}

model AgentNodeExecution {
  id String @id

  agentNodeId String
  AgentNode   AgentNode @relation("AgentExecution", fields: [agentNodeId], references: [id])

  inputSchema  String?
  outputSchema String?
  input        String
  output       String
  inputFiles   FileDefinition[] @relation("InputFiles")
  outputFiles  FileDefinition[] @relation("OutputFiles")

  // sqlite does not support enum
  // enum Status { STARTED, RUNNING, SUCCESS, FAILED }
  executionStatus String
}

model FileDefinition {
  id       String @id
  path     String
  metadata String // JSON serialized object
  mimeType String
  size     Int
  hash     String
  encoding String

  ReferrencedInputFiles  AgentNodeExecution[] @relation("InputFiles")
  ReferrencedOutputFiles AgentNodeExecution[] @relation("OutputFiles")
}
