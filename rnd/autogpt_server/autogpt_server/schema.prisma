datasource db {
  provider = "sqlite"
  url      = "file:./database.db"
}

generator client {
  provider             = "prisma-client-py"
  recursive_type_depth = 5
  interface            = "asyncio"
}

// This model describes the Agent Graph/Flow (Multi Agent System).
model AgentGraph {
  id          String  @id
  name        String?
  description String?

  startingAgentNodeId String
  StartingAgentNode   AgentNode @relation("AgentGraphRoot", fields: [startingAgentNodeId], references: [id])

  AgentNodes AgentNode[] @relation("AgentGraphNodes")
}

// This model describes a single node in the Agent Graph/Flow (Multi Agent System).
model AgentNode {
  id String @id

  agentComponentId String
  AgentComponent   AgentComponent @relation(fields: [agentComponentId], references: [id])

  agentGraphId String
  AgentGraph   AgentGraph @relation("AgentGraphNodes", fields: [agentGraphId], references: [id])

  // List of produced output, that the child node component should be executed.
  AgentOutputTriggers AgentNodeTrigger[] @relation("TriggeredNode")

  ExecutionHistory AgentNodeExecution[]

  // Prisma requires explicit back-references.
  ReferencedByAgentGraphAsRoot AgentGraph[]       @relation("AgentGraphRoot")
  ReferencedByAgentNodeTrigger AgentNodeTrigger[] @relation("TriggeringNode")
}

model AgentNodeTrigger {
  id String @id

  // The AgentNode that owns this trigger.
  agentNodeId String
  AgentNode   AgentNode @relation("TriggeringNode", fields: [agentNodeId], references: [id])

  // The AgentNode that will be triggered.
  triggerNodeId String
  TriggerNode   AgentNode @relation("TriggeredNode", fields: [triggerNodeId], references: [id])

  // The output that will trigger the child node.
  triggerOutputId String
  TriggerOutput   AgentComponentOutput @relation(fields: [triggerOutputId], references: [id])
}

// This model describes a component that will be executed by the AgentNode.
model AgentComponent {
  id   String @id
  name String @unique
  code String

  // We allow a component to have multiple types of output.
  Output      AgentComponentOutput[]
  inputSchema String

  // Prisma requires explicit back-references.
  ReferencedByAgentNode AgentNode[]
}

// This model describes the output (produced event) of an AgentComponent
model AgentComponentOutput {
  id           String @id
  outputName   String
  outputSchema String
  description  String

  agentComponentId String
  AgentComponent   AgentComponent @relation(fields: [agentComponentId], references: [id])

  // Prisma requires explicit back-references.
  ReferencedByAgentNodeExecution AgentNodeExecution[]
  ReferencedByAgentNodeTrigger   AgentNodeTrigger[]
}

// This model describes the execution of an AgentNode.
model AgentNodeExecution {
  id String @id

  agentNodeId String
  AgentNode   AgentNode @relation(fields: [agentNodeId], references: [id])

  inputData    String
  inputFiles   FileDefinition[]      @relation("InputFiles")
  outputData   String
  outputFiles  FileDefinition[]      @relation("OutputFiles")
  outputTypeId String?
  outputType   AgentComponentOutput? @relation(fields: [outputTypeId], references: [id])

  // sqlite does not support enum
  // enum Status { STARTED, RUNNING, SUCCESS, FAILED }
  executionStatus String

  // JSON serialized object of the execution state: information required to resume the execution.
  executionStateData String
}

// This model describes a file that can be used as input/output of an AgentNodeExecution.
model FileDefinition {
  id       String  @id
  path     String
  metadata String? // JSON serialized object
  mimeType String?
  size     Int?
  hash     String?
  encoding String?

  // Prisma requires explicit back-references.
  ReferencedByInputFiles  AgentNodeExecution[] @relation("InputFiles")
  ReferencedByOutputFiles AgentNodeExecution[] @relation("OutputFiles")
}
