datasource db {
  provider = "sqlite"
  url      = "file:./database.db"
}

generator client {
  provider             = "prisma-client-py"
  recursive_type_depth = 5
  interface            = "asyncio"
}

// This model describes a single node in the Agent Graph/Flow (Multi Agent System).
model AgentNode {
  id String @id

  agentComponentId String
  AgentComponent   AgentComponent @relation(fields: [agentComponentId], references: [id])

  // On which produced output, that the child node component should be executed.
  // The length has to be equal to ChildNodes(ChildNodes[i]) will be triggered by trigger[i]).
  // Or optionally equal to zero, which any types output will trigger the children.
  childNodeOutputTrigger AgentComponentOutput[]

  // These fields define the node relations as a graph.
  parentNodeId String?
  ParentNode   AgentNode?  @relation("AgentGraph", fields: [parentNodeId], references: [id])
  ChildNodes   AgentNode[] @relation("AgentGraph")

  ExecutionHistory AgentNodeExecution[]
}

// This model describes a component that will be executed by the AgentNode.
model AgentComponent {
  id   String @id
  name String
  code String

  // We allow a component to have multiple types of output.
  Output      AgentComponentOutput[]
  inputSchema String

  // Prisma requires explicit back-references.
  ReferencedByAgentNode AgentNode[]
}

// This model describes the output (produced event) of an AgentComponent
model AgentComponentOutput {
  id           String @id
  outputName   String
  outputSchema String
  description  String

  agentComponentId String
  AgentComponent   AgentComponent @relation(fields: [agentComponentId], references: [id])

  // Prisma requires explicit back-references.
  ReferencedByAgentNode          AgentNode[]
  ReferencedByAgentNodeExecution AgentNodeExecution[]
}

// This model describes the execution of an AgentNode.
model AgentNodeExecution {
  id String @id

  agentNodeId String
  AgentNode   AgentNode @relation(fields: [agentNodeId], references: [id])

  inputData    String
  inputFiles   FileDefinition[]      @relation("InputFiles")
  outputData   String
  outputFiles  FileDefinition[]      @relation("OutputFiles")
  outputTypeId String?
  outputType   AgentComponentOutput? @relation(fields: [outputTypeId], references: [id])

  // sqlite does not support enum
  // enum Status { STARTED, RUNNING, SUCCESS, FAILED }
  executionStatus String
}

// This model describes a file that can be used as input/output of an AgentNodeExecution.
model FileDefinition {
  id       String  @id
  path     String
  metadata String? // JSON serialized object
  mimeType String?
  size     Int?
  hash     String?
  encoding String?

  // Prisma requires explicit back-references.
  ReferrencedByInputFiles  AgentNodeExecution[] @relation("InputFiles")
  ReferrencedByOutputFiles AgentNodeExecution[] @relation("OutputFiles")
}
