{
  "fileName": "pinecone.py",
  "filePath": "autogpt/memory/pinecone.py",
  "url": "https://github.com/Significant-Gravitas/Auto-GPT/autogpt/memory/pinecone.py",
  "summary": "The `PineconeMemory` class in this code is a part of the Auto-GPT project and serves as a memory provider using Pinecone, a vector database service. It is responsible for storing and retrieving relevant data based on the input provided. The class inherits from `MemoryProviderSingleton`, ensuring that only one instance of the class is created throughout the project.\n\nUpon initialization, the `__init__` method sets up the Pinecone connection using the provided configuration. It initializes the Pinecone environment with the API key and region, and creates an index named \"auto-gpt\" with a dimension of 1536, cosine similarity metric, and pod type \"p1\" if it does not already exist.\n\nThe `add` method takes a data input, converts it into a vector using the `get_ada_embedding` function, and inserts it into the Pinecone index. The method increments the `vec_num` attribute, which keeps track of the number of vectors in the index.\n\nThe `get` method retrieves the most relevant data from the Pinecone index based on the input data. It calls the `get_relevant` method with a default value of 1 for the `num_relevant` parameter.\n\nThe `clear` method deletes all data from the Pinecone index.\n\nThe `get_relevant` method takes input data and a `num_relevant` parameter, which specifies the number of relevant data items to return. It converts the input data into a vector using the `get_ada_embedding` function and queries the Pinecone index for the top `num_relevant` results. The method returns a list of the raw text data from the sorted results.\n\nThe `get_stats` method returns statistics about the Pinecone index.\n\nExample usage:\n\n```python\nmemory = PineconeMemory(cfg)\nmemory.add(\"This is a sample text.\")\nrelevant_data = memory.get(\"Find relevant data for this text.\")\nmemory.clear()\n```",
  "questions": "1. **Question**: What is the purpose of the `PineconeMemory` class and how does it interact with the Pinecone service?\n   **Answer**: The `PineconeMemory` class is a memory provider that interacts with the Pinecone service to store and retrieve data. It initializes a connection to Pinecone, creates an index if it doesn't exist, and provides methods to add, get, clear, and retrieve relevant data from the memory.\n\n2. **Question**: How does the `add` method work and what kind of data can be added to the memory?\n   **Answer**: The `add` method takes a data input, converts it into an embedding using the `get_ada_embedding` function, and then inserts the data into the Pinecone index with a unique identifier. Currently, there is no metadata associated with the data, but this may change in the future.\n\n3. **Question**: How does the `get_relevant` method work and how can the number of relevant data items be adjusted?\n   **Answer**: The `get_relevant` method takes a data input and an optional `num_relevant` parameter (default is 5). It converts the input data into an embedding using the `get_ada_embedding` function and then queries the Pinecone index to find the top-k relevant data items based on the cosine similarity. The number of relevant data items returned can be adjusted by changing the `num_relevant` parameter."
}