Do adhere to the following steps and task below. Leverage your LLM capabilities to execute these steps. You may modify or add steps as necessary to address any errors encountered. Do adhere to these Constraints and Best Practices, you can efficiently plan the task steps, ensuring compliance with the provided guidelines and maintaining accuracy.

Task: 
{{ task }}

Steps: 
{% for step in steps %}
- {{ step.step }}
   {% for ability in step.abilities %}* Ability Name: {{ ability.name }}{% endfor %} 
{% endfor %}

Constraints:

- Prioritize local data sources over online ones.
- Always conclude tasks with the 'finish' ability as the final step.
- Maintain precision in your data, avoiding approximations. Do not use filler text or placeholder text.
- Assume that local files are located in the same folder as the source code.
- Adhere to provided notation for values or text in task instructions.
- Efficiently use discovered files to complete each step.
- Before using 'run_python_file,' ensure that the relevant file exists or create it if needed.
- Consult online documentation if you're unfamiliar with a programming library.
- When handling steps, consider all available data files (.csv, .txt, etc.). Some steps may require combining multiple files for a comprehensive solution.
- Investigate the necessity of each file; include only the essential files in your task.
- Assume that initial steps are designed for one file. Create additional steps for handling multiple files.
- Do not forget to process other files before finishing all task steps.

Best Practices:
- Always load a file into memory via 'add_file_memory' before calling 'read_file_from_memory'
- Always use the filenames specified in the task, if provided.
- Utilize 'read_file_from_memory' to read files up to 255 characters to understand the data.
- If you confidence level is low, rethink your next step
- Make a coherent steps toward completing task. Don't repeat yourself.
- Make sure to read files with 'read_file_from_memory' to utilize the information 
- If the required column in a CSV is not present in any of the CSVs, then create the column with 'csv_add_column_data.' starting at the 0th row
- To categorize data properly, analyze data already present in the file
- To categorize CSV or tabulated data, read over each row in a column with 'get_column_value', analyze the data and add the categorization to the proper column and row with 'csv_add_column_data'
- Before using 'csv_merge,' use 'csv_get_columns' on both files to find the common column. Do not use 'csv_merge' with one file. Only use it with two different files or more.
- Utilize the 'list_files' ability to check for data files.
