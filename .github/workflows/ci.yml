name: Python CI

on:
  push:
    branches: [ master, ci-test*]
  pull_request_target:
    branches: [ master, stable , ci-test*]

concurrency:
  group: ${{ format('ci-{0}', github.head_ref && format('pr-{0}', github.event.pull_request.number) || github.sha) }}
  cancel-in-progress: ${{ github.event_name == 'pull_request_target' }}

jobs:
  lint:
    runs-on: ubuntu-latest
    env:
      min-python-version: "3.10"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: Set up Python ${{ env.min-python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.min-python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with flake8
        run: flake8

      - name: Check black formatting
        run: black . --check
        if: success() || failure()

      - name: Check isort formatting
        run: isort . --check
        if: success() || failure()

      - name: Check mypy formatting
        run: mypy
        if: success() || failure()

  test:
    permissions:
      # Gives the action the necessary permissions for publishing new
      # comments in pull requests.
      pull-requests: write
      # Gives the action the necessary permissions for pushing data to the
      # python-coverage-comment-action branch, and for editing existing
      # comments (to avoid publishing multiple comments in the same PR)
      contents: write
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          submodules: true

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Sync submodule with branch and check conflicts
        run: |
          current_branch=$(echo ${{ github.ref }} | sed -e "s/refs\/heads\///g")
          pr_number=${{ github.event.pull_request.number }}
          new_branch="${current_branch}-${pr_number}"

          git config --global user.name "Github Actions"
          git config --global user.email "github-actions@github.com"

          cd tests/cassettes

          if git ls-remote --exit-code --heads origin $new_branch ; then
            git fetch origin $new_branch:$new_branch
            git fetch origin ${{ github.event.pull_request.base.ref }}:${{ github.event.pull_request.base.ref }}
            
            git checkout $new_branch

            if git merge --no-commit --no-ff ${{ github.event.pull_request.base.ref }}; then
              echo "No merge conflict detected."
            else
              echo "Merge conflict detected. This means we cannot use the cassettes previously sent, so we will take the cassettes of master."
              git merge --abort
              git checkout ${{ github.event.pull_request.base.ref }}
            fi
          else
            echo "Branch $new_branch does not exist. Exiting gracefully."
            exit 0
          fi
      

      - name: Run unittest tests with coverage
        run: |
          pytest -s tests/integration/challenges/basic_abilities/test_write_file.py
        env:
          CI: true
          PROXY: ${{ secrets.PROXY }}
          AGENT_MODE: ${{ vars.AGENT_MODE }}
          AGENT_TYPE: ${{ vars.AGENT_TYPE }}

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3

      - name: Update cassette submodule on merge into target branch
        run: |
          current_branch=$(echo ${{ github.ref }} | sed -e "s/refs\/heads\///g")
          pr_number=${{ github.event.pull_request.number }}
          new_branch="${current_branch}-${pr_number}"
          cd tests/cassettes
          git config --unset-all http.https://github.com/.extraheader
          git config --global user.name "Auto-GPT-Bot"
          git config --global user.email "github-bot@agpt.co"
          git remote add upstream https://github.com/Significant-Gravitas/cassettes.git
          git add .

          # Check if there are any changes
          git diff-index --quiet HEAD || git commit -m "Auto-update cassettes after merging PR #$pr_number"

          git push -f https://${{ secrets.PAT_REVIEW }}@github.com/Significant-Gravitas/cassettes.git HEAD:refs/heads/$new_branch
