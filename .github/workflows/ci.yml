name: Python CI

on:
  push:
    branches: [ master ]
  pull_request_target:
    branches: [ master, stable ]

concurrency:
  group: ${{ format('ci-{0}', github.head_ref && format('pr-{0}', github.event.pull_request.number) || github.sha) }}
  cancel-in-progress: ${{ github.event_name == 'pull_request_target' }}

jobs:
  lint:
    runs-on: ubuntu-latest
    env:
      min-python-version: "3.10"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Set up Python ${{ env.min-python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.min-python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with flake8
        run: flake8

      - name: Check black formatting
        run: black . --check
        if: success() || failure()

      - name: Check isort formatting
        run: isort . --check
        if: success() || failure()

  test:
    permissions:
      pull-requests: write
      contents: write
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.10", "3.11" ]

    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run unittest tests with coverage
        run: |
          pytest -s tests/integration/goal_oriented/test_write_file.py
        env:
          CI: true
          PROXY: https://us-central1-prod-benchmarks-core.cloudfunctions.net/proxy_function

      - name: Stage new files and commit
        run: |
          git add .
          git diff --cached --quiet && echo "No changes to commit" && exit 0
          git config user.email "github-actions@github.com"
          git config user.name "GitHub Actions"
          git commit -m "Add new cassettes"
          echo "COMMIT_SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: Create new branch and cherry-pick commit
        run: |
          if git show-ref --quiet refs/heads/cassette-diff-${{ github.event.pull_request.number }}; then
            git checkout cassette-diff-${{ github.event.pull_request.number }}
            git reset --hard $COMMIT_SHA
          else
            git checkout -b cassette-diff-${{ github.event.pull_request.number }}
            if [ -n "$COMMIT_SHA" ] && git cat-file -e $COMMIT_SHA^{commit}; then
              git cherry-pick $COMMIT_SHA || git cherry-pick --skip
            fi
          fi
          git push --force origin cassette-diff-${{ github.event.pull_request.number }} || echo "Push failed, commits already pushed"

      - name: Create PR and comment link in original PR
        uses: actions/github-script@v5
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const { owner, repo, number } = context.issue;
            const branch = `cassette-diff-${number}`;
            const title = `Cassette diff PR for PR #${number}`;
            const body = `This is the cassette diff PR for PR #${number}`;

            // Create a new PR
            const newPr = await github.pulls.create({
              owner,
              repo,
              title,
              head: branch,
              base: 'master',
              body,
            });

            // Comment in the original PR
            await github.issues.createComment({
              owner,
              repo,
              issue_number: number,
              body: `Created new cassette diff PR: [#${newPr.data.number}](${newPr.data.html_url})`,
            });
    
