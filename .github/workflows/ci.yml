name: Python CI

on:
  push:
    branches: [ master, ci-test*]
    paths-ignore:
      - 'tests/cassettes'
  pull_request_target:
    branches: [ master, stable , ci-test*]

concurrency:
  group: ${{ format('ci-{0}', github.head_ref && format('pr-{0}', github.event.pull_request.number) || github.sha) }}
  cancel-in-progress: ${{ github.event_name == 'pull_request_target' }}

jobs:
  lint:
    runs-on: ubuntu-latest
    env:
      min-python-version: "3.10"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: Set up Python ${{ env.min-python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.min-python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with flake8
        run: flake8

      - name: Check black formatting
        run: black . --check
        if: success() || failure()

      - name: Check isort formatting
        run: isort . --check
        if: success() || failure()

      - name: Check mypy formatting
        run: mypy
        if: success() || failure()

  test:
    permissions:
      # Gives the action the necessary permissions for publishing new
      # comments in pull requests.
      pull-requests: write
      # Gives the action the necessary permissions for pushing data to the
      # python-coverage-comment-action branch, and for editing existing
      # comments (to avoid publishing multiple comments in the same PR)
      contents: write
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          submodules: true
          token: ${{ secrets.PAT_REVIEW }}

      - name: Use cassettes previously sent
        if: ${{ github.event_name == 'pull_request_target' }}
        run: |
          new_branch="${{ github.event.pull_request.user.login }}-${{ github.event.pull_request.head.ref }}"
          git config --global user.name "Github Actions"
          git config --global user.email "github-actions@github.com"
          cd tests/cassettes

          if git ls-remote --exit-code --heads origin $new_branch ; then
            git fetch origin $new_branch:$new_branch
            git fetch origin ${{ github.event.pull_request.base.ref }}:${{ github.event.pull_request.base.ref }}
            
            git checkout $new_branch

            if git merge --no-commit --no-ff ${{ github.event.pull_request.base.ref }}; then
              echo "No merge conflict detected. We can use the cassettes previously sent."
            else
              echo "Merge conflict detected. This means we cannot use the cassettes previously sent, so we will take the cassettes of ${{ github.event.pull_request.base.ref }}."
              git merge --abort
              git checkout ${{ github.event.pull_request.base.ref }}
            fi
          else
            echo "Branch $new_branch does not exist. We will use the cassettes of ${{ github.event.pull_request.base.ref }}"
          fi

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run pytest tests with coverage
        run: |
          pytest -n auto --cov=autogpt --cov-report term-missing --cov-branch --cov-report xml --cov-report term
        env:
          CI: true
          PROXY: ${{ secrets.PROXY }}
          AGENT_MODE: ${{ vars.AGENT_MODE }}
          AGENT_TYPE: ${{ vars.AGENT_TYPE }}

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3

<<<<<<< HEAD
<<<<<<< HEAD
      - name: Stage Files and Check for New Cassettes
        id: stage_files_and_check
        run: |
          find tests -type f -name '*.yaml' -print0 | xargs -0 git add
          # Check for new cassettes added in PR after the commit
          NEW_CASSETTES_ADDED_IN_PR=$(git diff --name-only $(git merge-base ${{ github.event.pull_request.base.sha }} HEAD)..HEAD -- 'tests/**/cassettes/**/*.yaml' | wc -l)
          if [[ "$NEW_CASSETTES_ADDED_IN_PR" -gt 0 ]]
          then 
            echo "NEW_CASSETTES_ADDED_IN_PR=true" >> $GITHUB_ENV
          else 
            echo "NEW_CASSETTES_ADDED_IN_PR=false" >> $GITHUB_ENV
          fi      

      - name: Beat new challenges
        if: ${{ env.NEW_CASSETTES_ADDED_IN_PR}}
        run: |
          echo "This step will run the challenges soon."

      - name: Commit, Config, and Push
        id: commit_and_push
=======
      - name: Update cassette submodule on merge into master
        if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && github.ref == 'refs/heads/master'
=======
      - name: Update cassette submodule if push event
        if: ${{ github.event_name == 'push' }}
>>>>>>> f7517bb1 (ci test)
        run: |
          cd tests/cassettes
          current_branch=$(echo ${{ github.ref }} | sed -e "s/refs\/heads\///g")
          git fetch origin $current_branch
          git config --global user.name "Auto-GPT-Bot"
          git config --global user.email "github-bot@agpt.co"
          git add .
<<<<<<< HEAD
          git commit -am "Updated cassettes submodule"
          git push origin main
          cd ../..
          git config user.email "github-actions@github.com"
          git config user.name "GitHub Actions"
          git add tests/cassettes
          git commit -am "Updated main repo's submodules"
          git push origin master
        env:
<<<<<<< HEAD
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Stage new files and commit
        id: stage_files
>>>>>>> 93a76d2e (feat: make sure we push the tests/cassettes submodule on merge into master)
        run: |
          git diff --cached --quiet tests && echo "No changes to commit" && exit 0
          find tests -type f -name '*.yaml' -print0 | xargs -0 git add
          echo '${{ secrets.PAT_REVIEW }}' | gh auth login --with-token
          gh repo set-default ${{ github.repository }}
          gh pr checkout ${{ github.event.pull_request.number }}
          git config --global user.name "Auto-GPT-Bot"
          git config --global user.email "github-bot@agpt.co"
          git commit -m "Add new cassettes"
          git push origin ${{ github.head_ref }}
          TIMESTAMP_COMMIT=$(date +%Y%m%d%H%M%S) # generate a timestamp
          echo "TIMESTAMP_COMMIT=$TIMESTAMP_COMMIT" >> $GITHUB_ENV

<<<<<<< HEAD
      - name: Inform of auto commit.
        if: ${{ env.TIMESTAMP_COMMIT != null }}
=======
      - name: Create PR
        id: create_pr
        if:  ${{ env.TIMESTAMP_COMMIT != null }}
        uses: peter-evans/create-pull-request@v5
        with:
          commit-message: Update cassettes
          branch: cassette-diff-PR-${{ github.event.pull_request.number }}-${{ env.TIMESTAMP_COMMIT }}
          title: "Update cassette-diff-PR${{ github.event.pull_request.number }}-${{ env.TIMESTAMP_COMMIT }}"
          body: "This PR updates the cassettes. Please merge it."

      - name: Check PR
        if:  ${{ env.TIMESTAMP_COMMIT != null }}
        run: |
          echo "Pull Request Number - ${{ steps.create_pr.outputs.pull-request-number }}"
          echo "Pull Request URL - ${{ steps.create_pr.outputs.pull-request-url }}"

      - name: Comment PR URL in the current PR
        if:  ${{ env.TIMESTAMP_COMMIT != null }}
>>>>>>> 5120b3eb (ci: update git submodules separately to ensure it gets called)
        uses: thollander/actions-comment-pull-request@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          message: |
            We committed some changes to this branch, please run 
            ```
            git fetch
            git rebase origin/${{ github.head_ref }}
            ```
            before pushing more changes to the remote.
=======
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
>>>>>>> f6b47a6d (ci: remove unused code now that we are using git submodules to keep cassettes in sync)
=======

          # Check if there are any changes
          if ! git diff-index --quiet HEAD; then
              git commit -m "Auto-update cassettes after Push event"
              git pull --rebase origin $current_branch

              git push origin HEAD:refs/heads/$current_branch

              cd ../..
              git add tests/cassettes
              git commit -m "Update submodule reference"
              git push origin HEAD:refs/heads/$current_branch
          else
              echo "No changes to commit"
              exit 0
          fi

      - name: Update cassette submodule
        if: ${{ github.event_name == 'pull_request_target' }}
        run: |
          new_branch="${{ github.event.pull_request.user.login }}-${{ github.event.pull_request.head.ref }}"

          cd tests/cassettes
          git config --global user.name "Auto-GPT-Bot"
          git config --global user.email "github-bot@agpt.co"
          git add .

          # Check if there are any changes
          if ! git diff-index --quiet HEAD; then
              git commit -m "Auto-update cassettes after merging PR #$pr_number"
              git push -f origin HEAD:refs/heads/$new_branch
              
          else
              echo "No changes to commit"
              exit 0
          fi
          git fetch origin ${{ github.event.pull_request.base.ref }}:${{ github.event.pull_request.base.ref }} || echo "DIFF_EXISTS=false" >> $GITHUB_ENV
          differences=$(git diff origin/$new_branch origin/${{ github.event.pull_request.base.ref }})
    
          if [ -n "$differences" ]; then
            echo "DIFF_EXISTS=true" >> $GITHUB_ENV
          else
            echo "DIFF_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Apply or remove prompt change label and comment
        if: ${{ github.event_name == 'pull_request_target' }}
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          TOKEN=${{ secrets.PAT_REVIEW }}
          REPO=${{ github.repository }}

          if [[ "${{ env.DIFF_EXISTS }}" == "true" ]]; then
            echo "Adding label and comment..."
            curl -X POST \
            -H "Authorization: Bearer $TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/$REPO/issues/$PR_NUMBER/labels \
            -d '{"labels":["prompt change"]}'

            echo $TOKEN | gh auth login --with-token
            gh api repos/$REPO/issues/$PR_NUMBER/comments -X POST -F body="You changed AutoGPT's prompt. The cassettes have been updated and will be merged to the submodule when this Pull Request gets merged."
          else
            echo "Removing label..."
            curl -X DELETE \
            -H "Authorization: Bearer $TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/$REPO/issues/$PR_NUMBER/labels/prompt%20change
          fi
>>>>>>> f7517bb1 (ci test)
