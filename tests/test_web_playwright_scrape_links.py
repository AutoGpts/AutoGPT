# Date: 2023-5-20
# Author: Generated by GoCodeo.

from unittest.mock import MagicMock

import pytest

from autogpt.commands.web_playwright import scrape_links


@pytest.fixture
def mock_sync_playwright(mocker):
    return mocker.patch("autogpt.commands.web_playwright.sync_playwright")


class TestScrapeLinks:
    def test_positive_scrape_links(self, mock_sync_playwright):
        mock_page = MagicMock()
        mock_page.content.return_value = (
            '<html><body><a href="https://example.com">Example</a></body></html>'
        )
        mock_sync_playwright.return_value.__enter__.return_value.chromium.launch.return_value.new_page.return_value = (
            mock_page
        )
        url = "https://example.com"
        expected_result = ["Example (https://example.com)"]
        result = scrape_links(url)
        assert result == expected_result

    def test_negative_scrape_links_no_links(self, mock_sync_playwright):
        mock_page = MagicMock()
        mock_page.content.return_value = (
            "<html><body><p>No links here</p></body></html>"
        )
        mock_sync_playwright.return_value.__enter__.return_value.chromium.launch.return_value.new_page.return_value = (
            mock_page
        )

        url = "https://example.com"
        expected_result = []
        result = scrape_links(url)
        assert result == expected_result

    def test_error_scrape_links_invalid_url(self, mock_sync_playwright):
        mock_page = MagicMock()
        mock_page.goto.side_effect = Exception("Invalid URL")
        mock_sync_playwright.return_value.__enter__.return_value.chromium.launch.return_value.new_page.return_value = (
            mock_page
        )

        url = "invalid_url"
        expected_result = "Error: Invalid URL"
        result = scrape_links(url)
        assert result == expected_result

    def test_edge_scrape_links_multiple_links(self, mock_sync_playwright):
        mock_page = MagicMock()
        mock_page.content.return_value = '<html><body><a href="https://example.com">Example</a><a href="https://example2.com">Example2</a></body></html>'
        mock_sync_playwright.return_value.__enter__.return_value.chromium.launch.return_value.new_page.return_value = (
            mock_page
        )

        url = "https://example.com"
        expected_result = [
            "Example (https://example.com)",
            "Example2 (https://example2.com)",
        ]
        result = scrape_links(url)
        assert result == expected_result
