# Date: 2023-5-13
# Author: Generated by GoCodeo.


import unittest
import os
import subprocess
import docker
from unittest.mock import MagicMock, patch
from pathlib import Path
from docker.errors import ImageNotFound
from autogpt.commands.execute_code import execute_python_file
patch_func1 = 'autogpt.commands.execute_code.we_are_running_in_a_docker_container'
class TestExecutePythonFile(unittest.TestCase):

    def setUp(self):
        self.filename = "test_file.py"

    # Positive test case
    def test_execute_python_file_valid_file(self):
        with patch("os.path.isfile", return_value=True):
            with patch(patch_func1, return_value=False):
                with patch("subprocess.run") as mock_run:
                    mock_run.return_value.returncode = 0
                    mock_run.return_value.stdout = "Test output"
                    result = execute_python_file(self.filename)
                    self.assertEqual(result, "Test output")

    # Negative test case
    def test_execute_python_file_invalid_file_type(self):
        result = execute_python_file("invalid_file.txt")
        self.assertEqual(result, "Error: Invalid file type. Only .py files are allowed.")

    # Error test case
    def test_execute_python_file_nonexistent_file(self):
        with patch("os.path.isfile", return_value=False):
            result = execute_python_file(self.filename)
            self.assertEqual(result, f"Error: File '{self.filename}' does not exist.")

    # Edge test case
    def test_execute_python_file_error_in_execution(self):
        with patch("os.path.isfile", return_value=True):
            with patch(patch_func1, return_value=False):
                with patch("subprocess.run") as mock_run:
                    mock_run.return_value.returncode = 1
                    mock_run.return_value.stderr = "Test error"
                    result = execute_python_file(self.filename)
                    self.assertEqual(result, f"Error: {mock_run.return_value.stderr}")

    # Positive test case with Docker
    def test_execute_python_file_docker(self):
        with patch("os.path.isfile", return_value=True):
            with patch(patch_func1, return_value=True):
                with patch("docker.from_env") as mock_from_env:
                    mock_client = MagicMock()
                    mock_from_env.return_value = mock_client
                    mock_container = MagicMock()
                    mock_client.containers.run.return_value = mock_container
                    mock_container.logs.return_value = b"Test output"
                    result = execute_python_file(self.filename)
                    self.assertEqual(result, "Test output")

    # Error test case with Docker
    def test_execute_python_file_docker_error(self):
        with patch("os.path.isfile", return_value=True):
            with patch(patch_func1, return_value=True):
                with patch("docker.from_env") as mock_from_env:
                    mock_client = MagicMock()
                    mock_from_env.return_value = mock_client
                    mock_client.containers.run.side_effect = docker.errors.DockerException("Test error")
                    result = execute_python_file(self.filename)
                    self.assertEqual(result, "Error: Test error")

if __name__ == "__main__":
    unittest.main()
