# Date: 2023-5-13
# Author: Generated by GoCodeo.


import io
import unittest
from unittest.mock import patch, MagicMock
from PIL import Image
from autogpt.commands.image_gen import generate_image_with_hf, CFG

patch_func1 = 'autogpt.commands.image_gen.Image.open'


class TestGenerateImageWithHF(unittest.TestCase):

    @patch("requests.post")
    @patch(patch_func1)
    def test_generate_image_with_hf_positive(self, mock_open, mock_post):
        # Positive Test
        mock_response = MagicMock()
        mock_response.content = b"image_content"
        mock_post.return_value = mock_response
        mock_open.return_value = Image.new("RGB", (1, 1))

        CFG.huggingface_api_token = "test_token"
        CFG.huggingface_image_model = "test_model"

        prompt = "Test prompt"
        filename = "test_image.jpg"

        result = generate_image_with_hf(prompt, filename)
        self.assertEqual(result, f"Saved to disk:{filename}")

    def test_generate_image_with_hf_error(self):
        # Error Test
        CFG.huggingface_api_token = None
        prompt = "Test prompt"
        filename = "test_image.jpg"

        with self.assertRaises(ValueError):
            generate_image_with_hf(prompt, filename)

    @patch("requests.post")
    @patch(patch_func1)
    def test_generate_image_with_hf_edge_empty_prompt(self, mock_open, mock_post):
        # Edge Test
        mock_response = MagicMock()
        mock_response.content = b"image_content"
        mock_post.return_value = mock_response
        mock_open.return_value = Image.new("RGB", (1, 1))

        CFG.huggingface_api_token = "test_token"
        CFG.huggingface_image_model = "test_model"

        prompt = ""
        filename = "test_image.jpg"

        result = generate_image_with_hf(prompt, filename)
        self.assertEqual(result, f"Saved to disk:{filename}")

    @patch("requests.post")
    @patch(patch_func1)
    def test_generate_image_with_hf_edge_long_prompt(self, mock_open, mock_post):
        # Edge Test
        mock_response = MagicMock()
        mock_response.content = b"image_content"
        mock_post.return_value = mock_response
        mock_open.return_value = Image.new("RGB", (1, 1))

        CFG.huggingface_api_token = "test_token"
        CFG.huggingface_image_model = "test_model"

        prompt = "A" * 1000
        filename = "test_image.jpg"

        result = generate_image_with_hf(prompt, filename)
        self.assertEqual(result, f"Saved to disk:{filename}")

if __name__ == "__main__":
    unittest.main()
