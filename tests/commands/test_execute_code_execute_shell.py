# Date: 2023-5-13
# Author: Generated by GoCodeo.


import unittest
from unittest.mock import patch, MagicMock
from pathlib import Path
import os
import subprocess
from autogpt.commands.execute_code import execute_shell, CFG, logger

CFG.workspace_path = "/workspace"

class TestExecuteShell(unittest.TestCase):

    @patch("autogpt.commands.execute_code.Path.cwd")
    @patch("autogpt.commands.execute_code.os.chdir")
    @patch("autogpt.commands.execute_code.subprocess.run")
    def test_positive_execute_shell(self, mock_run, mock_chdir, mock_cwd):
        # Positive test
        mock_cwd.return_value = Path("/tmp")
        mock_run.return_value = MagicMock(stdout=b"Hello", stderr=b"")

        command_line = "echo Hello"
        expected_output = "STDOUT:\nb'Hello'\nSTDERR:\nb''"

        output = execute_shell(command_line)
        self.assertEqual(output, expected_output)

    @patch("autogpt.commands.execute_code.Path.cwd")
    @patch("autogpt.commands.execute_code.os.chdir")
    @patch("autogpt.commands.execute_code.subprocess.run")
    def test_negative_execute_shell(self, mock_run, mock_chdir, mock_cwd):
        # Negative test
        mock_cwd.return_value = Path("/tmp")
        mock_run.return_value = MagicMock(stdout=b"", stderr=b"Error")

        command_line = "non_existent_command"
        expected_output = "STDOUT:\nb''\nSTDERR:\nb'Error'"

        output = execute_shell(command_line)
        self.assertEqual(output, expected_output)

    @patch("autogpt.commands.execute_code.Path.cwd")
    @patch("autogpt.commands.execute_code.os.chdir")
    @patch("autogpt.commands.execute_code.subprocess.run")
    def test_edge_execute_shell_empty_command(self, mock_run, mock_chdir, mock_cwd):
        # Edge test
        mock_cwd.return_value = Path("/tmp")
        mock_run.return_value = MagicMock(stdout=b"", stderr=b"")

        command_line = ""
        expected_output = "STDOUT:\nb''\nSTDERR:\nb''"

        output = execute_shell(command_line)
        self.assertEqual(output, expected_output)

    @patch("autogpt.commands.execute_code.Path.cwd")
    @patch("autogpt.commands.execute_code.os.getcwd")
    @patch("autogpt.commands.execute_code.os.chdir")
    @patch("autogpt.commands.execute_code.subprocess.run")
    @patch("autogpt.commands.execute_code.logger.info")
    def test_execute_shell_logging(self, mock_logger_info, mock_run, mock_chdir, mock_getcwd, mock_cwd):
        # Test logging
        mock_getcwd.return_value = '/tmp'
        mock_cwd.return_value = Path("/tmp")
        mock_run.return_value = MagicMock(stdout=b"Hello", stderr=b"")

        command_line = "echo Hello"

        execute_shell(command_line)
        mock_logger_info.assert_called_with("Executing command 'echo Hello' in working directory '/tmp'")

if __name__ == "__main__":
    unittest.main()