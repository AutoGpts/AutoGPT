# Date: 2023-5-13
# Author: Generated by GoCodeo.


import unittest
from unittest.mock import patch, MagicMock
from autogpt.commands.git_operations import clone_repository, CFG
from git import Repo
from io import StringIO
patch_func1 = "autogpt.commands.git_operations.Repo.clone_from"
class TestCloneRepository(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        CFG.github_username = "test_username"
        CFG.github_api_key = "test_api_key"

    # Positive test case
    def test_clone_repository_success(self):
        url = "https://github.com/user/repo.git"
        clone_path = "/tmp/repo"

        with patch(patch_func1) as mock_clone_from:
            result = clone_repository(url, clone_path)
            self.assertEqual(result, f"Cloned {url} to {clone_path}")
            mock_clone_from.assert_called_once_with(url=f"//{CFG.github_username}:{CFG.github_api_key}@".join(url.split("//")), to_path=clone_path)

    # Negative test case
    @patch('sys.stderr', new_callable=StringIO)
    def test_clone_repository_invalid_url(self, mock_stderr):
        url = "invalid_url"
        clone_path = "/tmp/repo"

        with patch(patch_func1) as mock_clone_from:
            with self.assertRaises(ValueError):
                result = clone_repository(url, clone_path)
                self.assertIn("AttributeError", mock_stderr.getvalue())

    # Error test case
    def test_clone_repository_clone_error(self):
        url = "https://github.com/user/repo.git"
        clone_path = "/tmp/repo"

        with patch(patch_func1) as mock_clone_from:
            mock_clone_from.side_effect = Exception("Clone error")
            result = clone_repository(url, clone_path)
            self.assertEqual(result, "Error: Clone error")

    # Edge test case
    @patch('sys.stderr', new_callable=StringIO)
    def test_clone_repository_empty_url(self, mock_stderr):
        url = ""
        clone_path = "/tmp/repo"

        with patch(patch_func1) as mock_clone_from:
            with self.assertRaises(ValueError):
                result = clone_repository(url, clone_path)
                self.assertIn("AttributeError", mock_stderr.getvalue())

if __name__ == "__main__":
    unittest.main()