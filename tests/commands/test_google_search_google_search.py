# Date: 2023-5-13
# Author: Generated by GoCodeo.


import unittest
from unittest.mock import patch
import json
from autogpt.commands.google_search import google_search, safe_google_results, ddg
patch_func1 = 'autogpt.commands.google_search.ddg'

class TestGoogleSearch(unittest.TestCase):

    @patch(patch_func1)
    def test_positive_google_search(self, mock_ddg):
        # Positive Test
        mock_ddg.return_value = [{"title": "Test Title", "url": "https://test.com"}]
        query = "test query"
        num_results = 2
        expected_output = json.dumps(mock_ddg.return_value, ensure_ascii=False, indent=4)

        result = google_search(query, num_results)
        self.assertEqual(result, safe_google_results(expected_output))

    def test_negative_empty_query(self):
        # Negative Test
        query = ""
        num_results = 2
        expected_output = json.dumps([])

        result = google_search(query, num_results)
        self.assertEqual(result, expected_output)

    @patch(patch_func1)
    def test_negative_no_results(self, mock_ddg):
        # Negative Test
        mock_ddg.return_value = []
        query = "test query"
        num_results = 2
        expected_output = json.dumps([])

        result = google_search(query, num_results)
        self.assertEqual(result, expected_output)

    @patch(patch_func1)
    def test_edge_single_result(self, mock_ddg):
        # Edge Test
        mock_ddg.return_value = [{"title": "Test Title", "url": "https://test.com"}]
        query = "test query"
        num_results = 1
        expected_output = json.dumps(mock_ddg.return_value, ensure_ascii=False, indent=4)

        result = google_search(query, num_results)
        self.assertEqual(result, safe_google_results(expected_output))

    @patch(patch_func1)
    def test_edge_max_results(self, mock_ddg):
        # Edge Test
        mock_ddg.return_value = [
            {"title": f"Test Title {i}", "url": f"https://test{i}.com"} for i in range(10)
        ]
        query = "test query"
        num_results = 10
        expected_output = json.dumps(mock_ddg.return_value, ensure_ascii=False, indent=4)

        result = google_search(query, num_results)
        self.assertEqual(result, safe_google_results(expected_output))

if __name__ == "__main__":
    unittest.main()