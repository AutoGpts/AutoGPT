# Date: 2023-5-13
# Author: Generated by GoCodeo.


import unittest
from unittest.mock import MagicMock, patch
from typing import Tuple
from selenium.webdriver.remote.webdriver import WebDriver
from autogpt.commands.web_selenium import browse_website
patch_func1 = "autogpt.commands.web_selenium.scrape_text_with_selenium"
patch_func2 = "autogpt.commands.web_selenium.summary.summarize_text"
patch_func3 = "autogpt.commands.web_selenium.add_header"
patch_func4 = "autogpt.commands.web_selenium.scrape_links_with_selenium"
patch_func4 = "autogpt.commands.web_selenium.close_browser"

class TestBrowseWebsite(unittest.TestCase):

    @patch(patch_func1)
    @patch(patch_func3)
    @patch(patch_func2)
    @patch(patch_func4)
    @patch(patch_func4)
    def test_positive_browse_website(self, mock_close_browser, mock_scrape_links, mock_summarize_text, mock_add_header, mock_scrape_text):
        # Positive Test
        mock_scrape_text.return_value = (MagicMock(spec=WebDriver), "Sample text")
        mock_summarize_text.return_value = "Summary text"
        mock_scrape_links.return_value = ["link1", "link2", "link3"]

        url = "https://example.com"
        question = "What is the meaning of life?"
        result = browse_website(url, question)

        self.assertEqual(result[0], "Answer gathered from website: Summary text \n \n Links: ['link1', 'link2', 'link3']")
        self.assertIsInstance(result[1], WebDriver)

    @patch(patch_func1)
    @patch(patch_func3)
    @patch(patch_func2)
    @patch(patch_func4)
    @patch(patch_func4)
    def test_edge_browse_website_limit_links(self, mock_close_browser, mock_scrape_links, mock_summarize_text, mock_add_header, mock_scrape_text):
        # Edge Test
        mock_scrape_text.return_value = (MagicMock(spec=WebDriver), "Sample text")
        mock_summarize_text.return_value = "Summary text"
        mock_scrape_links.return_value = ["link1", "link2", "link3", "link4", "link5", "link6", "link7"]

        url = "https://example.com"
        question = "What is the meaning of life?"
        result = browse_website(url, question)

        self.assertEqual(result[0], "Answer gathered from website: Summary text \n \n Links: ['link1', 'link2', 'link3', 'link4', 'link5']")
        self.assertIsInstance(result[1], WebDriver)

if __name__ == '__main__':
    unittest.main()
