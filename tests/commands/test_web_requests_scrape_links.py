# Date: 2023-5-13
# Author: Generated by GoCodeo.


import unittest
from unittest.mock import patch, MagicMock
from bs4 import BeautifulSoup
from autogpt.commands.web_requests import scrape_links

patch_func1 = "autogpt.commands.web_requests.get_response"
patch_func2 = "autogpt.commands.web_requests.extract_hyperlinks"
patch_func3 = "autogpt.commands.web_requests.format_hyperlinks"

class TestScrapeLinks(unittest.TestCase):

    @patch(patch_func1)
    def test_positive_scrape_links(self, mock_get_response):
        # Positive test
        mock_response = MagicMock()
        mock_response.text = '<html><body><a href="https://example.com">Example</a></body></html>'

        mock_get_response.return_value = (mock_response, None)
        expected_result = ['Example (https://example.com)']
        self.assertEqual(scrape_links('https://example.com'), expected_result)

    @patch(patch_func1)
    def test_negative_scrape_links_error_message(self, mock_get_response):
        # Negative test
        mock_get_response.return_value = (None, 'Error message')
        self.assertEqual(scrape_links('https://invalidurl.com'), 'Error message')

    @patch(patch_func1)
    def test_negative_scrape_links_no_response(self, mock_get_response):
        # Negative test
        mock_get_response.return_value = (None, None)
        self.assertEqual(scrape_links('https://invalidurl.com'), 'Error: Could not get response')

    @patch(patch_func1)
    @patch(patch_func2)
    @patch(patch_func3)
    def test_edge_scrape_links_empty_links(self, mock_format_hyperlinks, mock_extract_hyperlinks, mock_get_response):
        # Edge test
        mock_response = MagicMock()
        mock_response.text = '<html><body></body></html>'
        mock_get_response.return_value = (mock_response, None)
        mock_extract_hyperlinks.return_value = []
        mock_format_hyperlinks.return_value = []
        self.assertEqual(scrape_links('https://emptyurl.com'), [])

    @patch(patch_func1)
    @patch(patch_func2)
    @patch(patch_func3)
    def test_edge_scrape_links_single_link(self, mock_format_hyperlinks, mock_extract_hyperlinks, mock_get_response):
        # Edge test
        mock_response = MagicMock()
        mock_response.text = '<html><body><a href="https://example.com">Example</a></body></html>'
        mock_get_response.return_value = (mock_response, None)
        mock_extract_hyperlinks.return_value = ['https://example.com']
        mock_format_hyperlinks.return_value = ['https://example.com']
        self.assertEqual(scrape_links('https://singlelinkurl.com'), ['https://example.com'])

if __name__ == '__main__':
    unittest.main()