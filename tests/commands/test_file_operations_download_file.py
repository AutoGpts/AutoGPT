# Date: 2023-5-13
# Author: Generated by GoCodeo.


import os
import unittest
from unittest.mock import patch, MagicMock
from io import BytesIO
import requests
from autogpt.commands.file_operations import download_file

class TestDownloadFile(unittest.TestCase):

    @patch("requests.Session.get")
    @patch("builtins.open", new_callable=unittest.mock.mock_open)
    def test_positive_download_file(self, mock_open, mock_get):
        # Positive Test
        url = "http://example.com/file.txt"
        filename = "test_files/file.txt"

        mock_response = MagicMock()
        mock_response.iter_content.return_value = [b"Hello, World!"]
        mock_response.headers.get.return_value = "13"
        mock_response.raise_for_status.return_value = None
        mock_get.return_value.__enter__.return_value = mock_response

        result = download_file(url, filename)
        expected_result = 'Successfully downloaded and locally stored file: "test_files/file.txt"! (Size: 13.00 B)'
        self.assertEqual(result, expected_result)

    @patch("requests.Session.get")
    def test_negative_http_error(self, mock_get):
        # Negative Test
        url = "http://example.com/file.txt"
        filename = "test_files/file.txt"

        mock_response = MagicMock()
        mock_response.raise_for_status.side_effect = requests.HTTPError("HTTP Error")
        mock_get.return_value.__enter__.return_value = mock_response

        result = download_file(url, filename)
        expected_result = "Got an HTTP Error whilst trying to download file: HTTP Error"
        self.assertEqual(result, expected_result)

    @patch("requests.Session.get")
    def test_error_exception(self, mock_get):
        # Error Test
        url = "http://example.com/file.txt"
        filename = "test_files/file.txt"

        mock_get.side_effect = Exception("Some Error")

        result = download_file(url, filename)
        expected_result = "Error: Some Error"
        self.assertEqual(result, expected_result)

    def test_edge_case_empty_url(self):
        # Edge Test
        url = ""
        filename = "test_files/file.txt"

        result = download_file(url, filename)
        expected_result = "Error: Invalid URL '': No scheme supplied. Perhaps you meant https://?"
        self.assertEqual(result, expected_result)

if __name__ == "__main__":
    unittest.main()