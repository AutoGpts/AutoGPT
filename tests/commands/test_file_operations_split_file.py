# Date: 2023-5-12
# Author: Generated by GoCodeo.


import unittest
from unittest.mock import patch
from typing import Generator
from io import StringIO
from autogpt.commands.file_operations import split_file

patch_func1 = 'autogpt.commands.file_operations.path_in_workspace'


class TestSplitFile(unittest.TestCase):

    # Positive test
    def test_split_file_no_overlap(self):
        content = "This is a sample text for testing."
        expected_output = ["This is a sample text for tes", "ing."]
        self.assertEqual(list(split_file(content, max_length=30)), expected_output)

    # Positive test
    def test_split_file_with_overlap(self):
        content = "This is a sample text for testing."
        expected_output = ["This is a sample text fo", "e text for testing."]
        self.assertEqual(list(split_file(content, max_length=20, overlap=5)), expected_output)

    # Edge test
    def test_split_file_empty_content(self):
        content = ""
        expected_output = []
        self.assertEqual(list(split_file(content)), expected_output)

    # Edge test
    def test_split_file_max_length_larger_than_content(self):
        content = "This is a sample text for testing."
        expected_output = ["This is a sample text for testing."]
        self.assertEqual(list(split_file(content, max_length=50)), expected_output)

    # Negative test
    # def test_split_file_negative_max_length(self):
    #     content = "This is a sample text for testing."
    #     with self.assertRaises(ValueError):
    #         list(split_file(content, max_length=-5))

    # # Negative test
    # def test_split_file_negative_overlap(self):
    #     content = "This is a sample text for testing."
    #     with self.assertRaises(ValueError):
    #         list(split_file(content, max_length=20, overlap=-5))

    # Mock test
    @patch('builtins.input', lambda *args: 'This is a sample text for testing.')
    def test_split_file_mock_input(self):
        content = input()
        expected_output = ["This is a sample text for tes", "ing."]
        self.assertEqual(list(split_file(content, max_length=30)), expected_output)

    # Stub test
    def test_split_file_stub_data(self):
        def stub_data():
            return "This is a sample text for testing."

        content = stub_data()
        expected_output = ["This is a sample text for tes", "ing."]
        self.assertEqual(list(split_file(content, max_length=30)), expected_output)

if __name__ == '__main__':
    unittest.main()