# Date: 2023-5-13
# Author: Generated by GoCodeo.


import unittest
from unittest.mock import MagicMock
from typing import Callable, Any, Optional
import functools
from autogpt.commands.command import command, Command, AUTO_GPT_COMMAND_IDENTIFIER

class TestCommandDecorator(unittest.TestCase):

    # Positive test
    def test_command_decorator_with_defaults(self):
        @command(name="test_command", description="Test command description")
        def test_func(a, b):
            return a + b

        self.assertIsInstance(test_func.command, Command)
        self.assertEqual(test_func.command.name, "test_command")
        self.assertEqual(test_func.command.description, "Test command description")
        self.assertEqual(test_func.command.signature, "")
        self.assertTrue(test_func.command.enabled)
        self.assertIsNone(test_func.command.disabled_reason)
        self.assertTrue(hasattr(test_func, AUTO_GPT_COMMAND_IDENTIFIER))

    # Positive test
    def test_command_decorator_with_custom_values(self):
        @command(name="test_command", description="Test command description", signature="a b", enabled=False, disabled_reason="Testing")
        def test_func(a, b):
            return a + b

        self.assertIsInstance(test_func.command, Command)
        self.assertEqual(test_func.command.name, "test_command")
        self.assertEqual(test_func.command.description, "Test command description")
        self.assertEqual(test_func.command.signature, "a b")
        self.assertFalse(test_func.command.enabled)
        self.assertEqual(test_func.command.disabled_reason, "Testing")
        self.assertTrue(hasattr(test_func, AUTO_GPT_COMMAND_IDENTIFIER))

    # Positive test
    def test_command_decorator_function_call(self):
        @command(name="test_command", description="Test command description")
        def test_func(a, b):
            return a + b

        result = test_func(2, 3)
        self.assertEqual(result, 5)

    # Error test
    def test_command_decorator_missing_required_arguments(self):
        with self.assertRaises(TypeError):
            @command()
            def test_func(a, b):
                return a + b

    # Edge test
    def test_command_decorator_with_empty_name_and_description(self):
        with self.assertRaises(ValueError):
            @command(name="", description="")
            def test_func(a, b):
                return a + b

if __name__ == '__main__':
    unittest.main()