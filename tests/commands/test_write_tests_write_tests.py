# Date: 2023-5-13
# Author: Generated by GoCodeo.


import unittest
import json
from unittest.mock import patch
from typing import Optional
from ..write_tests import write_tests
patch_func1 = "autogpt.commands.write_tests.call_ai_function"

class TestWriteTests(unittest.TestCase):

    @patch(patch_func1)
    def test_positive_write_tests(self, mock_call_ai_function):
        # Positive test case
        code = "def add(a, b): return a + b"
        focus = ["edge", "positive", "negative"]
        expected_result = "Test cases generated successfully"

        mock_call_ai_function.return_value = expected_result
        result = write_tests(code, focus)

        self.assertEqual(result, expected_result)
        mock_call_ai_function.assert_called_once_with(
            "def create_test_cases(code: str, focus: Optional[str] = None) -> str:",
            [code, json.dumps(focus)],
            "Generates test cases for the existing code, focusing on specific areas if required."
        )

    @patch(patch_func1)
    def test_negative_write_tests(self, mock_call_ai_function):
        # Negative test case
        code = "def add(a, b): return a + b"
        focus = ["edge", "positive", "negative"]
        expected_result = "Error: Unable to generate test cases"

        mock_call_ai_function.return_value = expected_result
        result = write_tests(code, focus)

        self.assertEqual(result, expected_result)
        mock_call_ai_function.assert_called_once_with(
            "def create_test_cases(code: str, focus: Optional[str] = None) -> str:",
            [code, json.dumps(focus)],
            "Generates test cases for the existing code, focusing on specific areas if required."
        )

    @patch(patch_func1)
    def test_edge_write_tests_empty_code(self, mock_call_ai_function):
        # Edge test case
        code = ""
        focus = ["edge", "positive", "negative"]
        expected_result = "Error: Code is empty"

        mock_call_ai_function.return_value = expected_result
        result = write_tests(code, focus)

        self.assertEqual(result, expected_result)
        mock_call_ai_function.assert_called_once_with(
            "def create_test_cases(code: str, focus: Optional[str] = None) -> str:",
            [code, json.dumps(focus)],
            "Generates test cases for the existing code, focusing on specific areas if required."
        )

    @patch(patch_func1)
    def test_edge_write_tests_empty_focus(self, mock_call_ai_function):
        # Edge test case
        code = "def add(a, b): return a + b"
        focus = []
        expected_result = "Test cases generated successfully"

        mock_call_ai_function.return_value = expected_result
        result = write_tests(code, focus)

        self.assertEqual(result, expected_result)
        mock_call_ai_function.assert_called_once_with(
            "def create_test_cases(code: str, focus: Optional[str] = None) -> str:",
            [code, json.dumps(focus)],
            "Generates test cases for the existing code, focusing on specific areas if required."
        )

if __name__ == "__main__":
    unittest.main()
