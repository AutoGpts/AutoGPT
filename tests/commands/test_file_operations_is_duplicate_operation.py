# Date: 2023-5-13
# Author: Generated by GoCodeo.


import unittest
from unittest.mock import patch
from autogpt.commands.file_operations import is_duplicate_operation, Operation, file_operations_state, CFG
patch_func1 = 'autogpt.commands.file_operations.file_operations_state'
class TestIsDuplicateOperation(unittest.TestCase):

    @patch(patch_func1)
    def test_positive_delete_operation(self, mock_file_operations_state):
        mock_file_operations_state.return_value = {"file1.txt": "12345"}
        operation = 'delete'
        filename = "file2.txt"
        result = is_duplicate_operation(operation, filename)
        self.assertTrue(result)

    @patch(patch_func1)
    def test_negative_delete_operation(self, mock_file_operations_state):
        mock_file_operations_state.return_value = {"file1.txt": "12345"}
        operation = 'delete'
        filename = "file1.txt"
        result = is_duplicate_operation(operation, filename)
        self.assertFalse(result)

    @patch(patch_func1)
    def test_positive_write_operation(self, mock_file_operations_state):
        mock_file_operations_state.return_value = {"file1.txt": "12345"}
        operation = 'write'
        filename = "file1.txt"
        checksum = "12345"
        result = is_duplicate_operation(operation, filename, checksum)
        self.assertTrue(result)

    @patch(patch_func1)
    def test_negative_write_operation(self, mock_file_operations_state):
        mock_file_operations_state.return_value = {"file1.txt": "12345"}
        operation = 'write'
        filename = "file1.txt"
        checksum = "67890"
        result = is_duplicate_operation(operation, filename, checksum)
        self.assertFalse(result)

    @patch(patch_func1)
    def test_error_invalid_operation(self, mock_file_operations_state):
        mock_file_operations_state.return_value = {"file1.txt": "12345"}
        operation = "invalid_operation"
        filename = "file1.txt"
        with self.assertRaises(ValueError):
            is_duplicate_operation(operation, filename)

    @patch(patch_func1)
    def test_edge_empty_state(self, mock_file_operations_state):
        mock_file_operations_state.return_value = {}
        operation = 'write'
        filename = "file1.txt"
        checksum = "12345"
        result = is_duplicate_operation(operation, filename, checksum)
        self.assertFalse(result)

if __name__ == '__main__':
    unittest.main()
