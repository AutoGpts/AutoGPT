# Date: 2023-5-13
# Author: Generated by GoCodeo.


import os
import unittest
from unittest.mock import patch, MagicMock
from autogpt.commands.file_operations import write_to_file
patch_func1 = "autogpt.commands.file_operations.text_checksum"
patch_func2 = "autogpt.commands.file_operations.is_duplicate_operation"
patch_func3 = "autogpt.commands.file_operations.log_operation"
class TestWriteToFile(unittest.TestCase):

    @patch(patch_func1)
    @patch(patch_func2)
    @patch("os.makedirs")
    @patch("builtins.open")
    @patch(patch_func3)
    def test_positive_write_to_file(self, mock_log_operation, mock_open, mock_makedirs, mock_is_duplicate_operation, mock_text_checksum):
        # Positive test
        mock_text_checksum.return_value = "12345"
        mock_is_duplicate_operation.return_value = False

        result = write_to_file("testfile.txt", "Hello, World!")
        self.assertEqual(result, "File written to successfully.")
        mock_makedirs.assert_called_once_with(os.path.dirname("testfile.txt"), exist_ok=True)
        mock_open.assert_called_once_with("testfile.txt", "w", encoding="utf-8")
        mock_log_operation.assert_called_once_with("write", "testfile.txt", "12345")

    @patch(patch_func1)
    @patch(patch_func2)
    def test_negative_duplicate_operation(self, mock_is_duplicate_operation, mock_text_checksum):
        # Negative test
        mock_text_checksum.return_value = "12345"
        mock_is_duplicate_operation.return_value = True

        result = write_to_file("testfile.txt", "Hello, World!")
        self.assertEqual(result, "Error: File has already been updated.")

    @patch(patch_func1)
    @patch(patch_func2)
    @patch("os.makedirs")
    @patch("builtins.open")
    def test_error_open_file_exception(self, mock_open, mock_makedirs, mock_is_duplicate_operation, mock_text_checksum):
        # Error test
        mock_text_checksum.return_value = "12345"
        mock_is_duplicate_operation.return_value = False
        mock_open.side_effect = Exception("File open error")

        result = write_to_file("testfile.txt", "Hello, World!")
        self.assertEqual(result, "Error: File open error")

if __name__ == '__main__':
    unittest.main()
