# Date: 2023-5-13
# Author: Generated by GoCodeo.


import os
import unittest
from unittest.mock import patch, MagicMock
from typing import List
from autogpt.commands.file_operations import list_files
patch_func1 = 'autogpt.commands.file_operations.CFG'

class TestListFiles(unittest.TestCase):

    @patch("os.walk")
    def test_positive_list_files(self, mock_walk):
        # Test Type: Positive

        mock_walk.return_value = [
            ("/test_directory", [], ["file1.txt", "file2.txt"]),
            ("/test_directory/sub_directory", [], ["file3.txt"]),
        ]

        expected_files = [
            "file1.txt",
            "file2.txt",
            "sub_directory/file3.txt",
        ]

        with patch(patch_func1) as mock_cfg:
            mock_cfg.workspace_path = "/test_directory"
            result = list_files("/test_directory")

        self.assertEqual(result, expected_files)

    @patch("os.walk")
    def test_positive_list_files_no_hidden_files(self, mock_walk):
        # Test Type: Positive

        mock_walk.return_value = [
            ("/test_directory", [], [".hidden_file.txt", "file1.txt"]),
        ]

        expected_files = [
            "file1.txt",
        ]

        with patch(patch_func1) as mock_cfg:
            mock_cfg.workspace_path = "/test_directory"
            result = list_files("/test_directory")

        self.assertEqual(result, expected_files)

    @patch("os.walk")
    def test_positive_list_files_empty_directory(self, mock_walk):
        # Test Type: Positive

        mock_walk.return_value = [
            ("/test_directory", [], []),
        ]

        expected_files = []

        with patch(patch_func1) as mock_cfg:
            mock_cfg.workspace_path = "/test_directory"
            result = list_files("/test_directory")

        self.assertEqual(result, expected_files)

    @patch("os.walk")
    def test_error_list_files_invalid_directory(self, mock_walk):
        # Test Type: Error

        mock_walk.side_effect = FileNotFoundError("Directory not found")

        with self.assertRaises(FileNotFoundError):
            list_files("/invalid_directory")

    @patch("os.walk")
    def test_edge_list_files_large_number_of_files(self, mock_walk):
        # Test Type: Edge

        mock_walk.return_value = [
            ("/test_directory", [], [f"file{i}.txt" for i in range(1, 1001)]),
        ]

        expected_files = [f"file{i}.txt" for i in range(1, 1001)]

        with patch(patch_func1) as mock_cfg:
            mock_cfg.workspace_path = "/test_directory"
            result = list_files("/test_directory")

        self.assertEqual(result, expected_files)


if __name__ == "__main__":
    unittest.main()