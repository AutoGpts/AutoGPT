# Date: 2023-5-13
# Author: Generated by GoCodeo.


import io
import unittest
from unittest.mock import MagicMock, patch
from base64 import b64decode
from PIL import Image
import requests
from autogpt.commands.image_gen import generate_image_with_sd_webui, CFG

class TestGenerateImageWithSDWebUI(unittest.TestCase):

    @patch("requests.Session")
    @patch("requests.post")
    @patch("PIL.Image.open")
    def test_generate_image_with_sd_webui_positive(self, mock_open, mock_post, mock_session):
        # Positive Test
        mock_post.return_value.json.return_value = {
            "images": ["test_image_data"]
        }
        mock_open.return_value.save.return_value = None

        result = generate_image_with_sd_webui("test_prompt", "test_filename")
        self.assertEqual(result, "Saved to disk:test_filename")

    @patch("requests.Session")
    @patch("requests.post")
    @patch("PIL.Image.open")
    def test_generate_image_with_sd_webui_negative(self, mock_open, mock_post, mock_session):
        # Negative Test
        mock_post.return_value.json.return_value = {
            "images": []
        }

        with self.assertRaises(IndexError):
            generate_image_with_sd_webui("test_prompt", "test_filename")

    @patch("requests.Session")
    @patch("requests.post")
    @patch("PIL.Image.open")
    def test_generate_image_with_sd_webui_error(self, mock_open, mock_post, mock_session):
        # Error Test
        mock_post.return_value.json.side_effect = ValueError("Invalid JSON")

        with self.assertRaises(ValueError):
            generate_image_with_sd_webui("test_prompt", "test_filename")

    @patch("requests.Session")
    @patch("requests.post")
    @patch("PIL.Image.open")
    def test_generate_image_with_sd_webui_edge(self, mock_open, mock_post, mock_session):
        # Edge Test
        mock_post.return_value.json.return_value = {
            "images": ["test_image_data"]
        }
        mock_open.return_value.save.return_value = None

        result = generate_image_with_sd_webui("test_prompt", "test_filename", size=1024, negative_prompt="test_negative_prompt", extra={"test_key": "test_value"})
        self.assertEqual(result, "Saved to disk:test_filename")

if __name__ == '__main__':
    unittest.main()