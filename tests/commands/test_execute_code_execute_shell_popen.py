# Date: 2023-5-13
# Author: Generated by GoCodeo.


import os
import unittest
from unittest.mock import patch, MagicMock
import subprocess
from autogpt.commands.execute_code import execute_shell_popen, CFG

class TestExecuteShellPopen(unittest.TestCase):

    @patch("os.getcwd")
    @patch("os.chdir")
    @patch("subprocess.Popen")
    def test_positive_execute_shell_popen(self, mock_popen, mock_chdir, mock_getcwd):
        # Positive test case
        mock_getcwd.return_value = "/current_dir"
        CFG.workspace_path = "/workspace"
        mock_popen.return_value.pid = 1234

        command_line = "echo 'Hello, World!'"
        result = execute_shell_popen(command_line)

        mock_chdir.assert_any_call(CFG.workspace_path)
        mock_chdir.assert_any_call("/current_dir")
        mock_popen.assert_called_once_with(
            command_line,
            shell=True,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL
        )
        self.assertEqual(result, "Subprocess started with PID:'1234'")

    @patch("os.getcwd")
    @patch("os.chdir")
    @patch("subprocess.Popen")
    def test_negative_execute_shell_popen(self, mock_popen, mock_chdir, mock_getcwd):
        # Negative test case
        mock_getcwd.return_value = "/current_dir"
        CFG.workspace_path = "/workspace"
        mock_popen.side_effect = Exception("Error executing command")

        command_line = "invalid_command"
        with self.assertRaises(Exception) as context:
            execute_shell_popen(command_line)

        self.assertTrue("Error executing command" in str(context.exception))

    @patch("os.getcwd")
    @patch("os.chdir")
    @patch("subprocess.Popen")
    def test_edge_execute_shell_popen_same_directory(self, mock_popen, mock_chdir, mock_getcwd):
        # Edge test case
        mock_getcwd.return_value = "/workspace"
        CFG.workspace_path = "/workspace"
        mock_popen.return_value.pid = 1234

        command_line = "echo 'Hello, World!'"
        result = execute_shell_popen(command_line)

        mock_chdir.assert_not_called()
        mock_popen.assert_called_once_with(
            command_line,
            shell=True,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL
        )
        self.assertEqual(result, "Subprocess started with PID:'1234'")

if __name__ == "__main__":
    unittest.main()