# Date: 2023-5-13
# Author: Generated by GoCodeo.


import os
import unittest
from unittest.mock import MagicMock, patch
from autogpt.commands.file_operations import append_to_file
patch_func1 = 'autogpt.commands.file_operations.log_operation'

class TestAppendToFile(unittest.TestCase):

    # Positive test case
    @patch("os.makedirs")
    @patch(patch_func1)
    def test_append_to_file_success(self, mock_log_operation, mock_makedirs):
        result = append_to_file("test.txt", "Hello, World!", should_log=True)
        self.assertEqual(result, "Text appended successfully.")
        mock_makedirs.assert_called_once_with(os.path.dirname("test.txt"), exist_ok=True)
        mock_log_operation.assert_called_once()

    # Negative test case
    @patch("os.makedirs")
    def test_append_to_file_makedirs_error(self, mock_makedirs):
        mock_makedirs.side_effect = Exception("Error creating directory")
        result = append_to_file("test.txt", "Hello, World!")
        self.assertEqual(result, "Error: Error creating directory")

    # Error test case
    @patch("os.makedirs")
    @patch("builtins.open")
    def test_append_to_file_open_error(self, mock_open, mock_makedirs):
        mock_open.side_effect = Exception("Error opening file")
        result = append_to_file("test.txt", "Hello, World!")
        self.assertEqual(result, "Error: Error opening file")

    # Edge test case
    @patch("os.makedirs")
    @patch(patch_func1)
    def test_append_to_file_empty_text(self, mock_log_operation, mock_makedirs):
        result = append_to_file("test.txt", "", should_log=True)
        self.assertEqual(result, "Text appended successfully.")
        mock_makedirs.assert_called_once_with(os.path.dirname("test.txt"), exist_ok=True)
        mock_log_operation.assert_called_once()

if __name__ == "__main__":
    unittest.main()