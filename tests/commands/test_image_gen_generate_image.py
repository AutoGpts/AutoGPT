# Date: 2023-5-12
# Author: Generated by GoCodeo.


import unittest
from unittest.mock import patch
from uuid import uuid4
from autogpt.commands.image_gen import generate_image

patch_func1 = 'autogpt.commands.image_gen.CFG.image_provider'
patch_func2 = 'autogpt.commands.image_gen.generate_image_with_dalle'
patch_func3 = 'autogpt.commands.image_gen.generate_image_with_hf'
patch_func4 = 'autogpt.commands.image_gen.generate_image_with_sd_webui'

class TestGenerateImage(unittest.TestCase):

    @patch("uuid.uuid4")
    def test_generate_image_dalle_positive(self, mock_uuid4):
        mock_uuid4.return_value = uuid4()
        prompt = "A beautiful sunset"
        size = 256

        with patch(patch_func1, "dalle"):
            with patch(patch_func2) as mock_generate_image_with_dalle:
                mock_generate_image_with_dalle.return_value = "dalle_image.jpg"
                result = generate_image(prompt, size)
                mock_generate_image_with_dalle.assert_called_once_with(prompt, f"{None}/{str(mock_uuid4.return_value)}.jpg", size)
                self.assertEqual(result, "dalle_image.jpg")

    @patch("uuid.uuid4")
    def test_generate_image_huggingface_positive(self, mock_uuid4):
        mock_uuid4.return_value = uuid4()
        prompt = "A beautiful sunset"

        with patch(patch_func1, "huggingface"):
            with patch(patch_func3) as mock_generate_image_with_hf:
                mock_generate_image_with_hf.return_value = "hf_image.jpg"
                result = generate_image(prompt)
                mock_generate_image_with_hf.assert_called_once_with(prompt, f"{None}/{str(mock_uuid4.return_value)}.jpg")
                self.assertEqual(result, "hf_image.jpg")

    @patch("uuid.uuid4")
    def test_generate_image_sdwebui_positive(self, mock_uuid4):
        mock_uuid4.return_value = uuid4()
        prompt = "A beautiful sunset"
        size = 256

        with patch(patch_func1, "sdwebui"):
            with patch(patch_func4) as mock_generate_image_with_sd_webui:
                mock_generate_image_with_sd_webui.return_value = "sdwebui_image.jpg"
                result = generate_image(prompt, size)
                mock_generate_image_with_sd_webui.assert_called_once_with(prompt, f"{None}/{str(mock_uuid4.return_value)}.jpg", size)
                self.assertEqual(result, "sdwebui_image.jpg")

    def test_generate_image_no_provider_set(self):
        prompt = "A beautiful sunset"
        size = 256

        with patch(patch_func1, None):
            result = generate_image(prompt, size)
            self.assertEqual(result, "No Image Provider Set")

if __name__ == "__main__":
    unittest.main()