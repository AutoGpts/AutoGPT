# Date: 2023-5-13
# Author: Generated by GoCodeo.


import unittest
from unittest.mock import Mock, MagicMock
from typing import Callable, Any, Optional
import inspect
from autogpt.commands.command import Command


# Test cases
class TestCommand(unittest.TestCase):

    def test_init(self):
        # Positive test
        mock_method = Mock(return_value="test")
        command = Command("test_command", "A test command", mock_method)

        self.assertEqual(command.name, "test_command")
        self.assertEqual(command.description, "A test command")
        self.assertEqual(command.method, mock_method)
        self.assertEqual(command.signature, str(inspect.signature(mock_method)))
        self.assertTrue(command.enabled)
        self.assertIsNone(command.disabled_reason)

    def test_init_with_optional_parameters(self):
        # Positive test
        mock_method = Mock(return_value="test")
        command = Command("test_command", "A test command", mock_method, signature="(arg1, arg2)", enabled=False, disabled_reason="Testing")

        self.assertEqual(command.name, "test_command")
        self.assertEqual(command.description, "A test command")
        self.assertEqual(command.method, mock_method)
        self.assertEqual(command.signature, "(arg1, arg2)")
        self.assertFalse(command.enabled)
        self.assertEqual(command.disabled_reason, "Testing")

    def test_call(self):
        # Positive test
        mock_method = Mock(return_value="test")
        command = Command("test_command", "A test command", mock_method)

        result = command("arg1", "arg2")

        mock_method.assert_called_once_with("arg1", "arg2")
        self.assertEqual(result, "test")

    def test_call_disabled(self):
        # Negative test
        mock_method = Mock(return_value="test")
        command = Command("test_command", "A test command", mock_method, enabled=False, disabled_reason="Testing")

        result = command("arg1", "arg2")

        mock_method.assert_not_called()
        self.assertEqual(result, "Command 'test_command' is disabled: Testing")

    def test_str(self):
        # Positive test
        mock_method = Mock(return_value="test")
        command = Command("test_command", "A test command", mock_method)

        command_str = str(command)

        self.assertEqual(command_str, "test_command: A test command, args: ()")

if __name__ == '__main__':
    unittest.main()