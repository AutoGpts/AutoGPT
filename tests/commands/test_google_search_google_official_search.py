# Date: 2023-5-13
# Author: Generated by GoCodeo.


import unittest
from unittest.mock import MagicMock, patch
from googleapiclient.errors import HttpError
from autogpt.commands.google_search import google_official_search
patch_func1 = 'googleapiclient.discovery.build'

class TestGoogleOfficialSearch(unittest.TestCase):

    @patch(patch_func1)
    def test_positive_search(self, mock_build):
        mock_service = MagicMock()
        mock_build.return_value = mock_service
        mock_service.cse().list().execute.return_value = {
            "items": [{"link": "https://example.com"}]
        }

        query = "test query"
        num_results = 2
        expected_result = '["https://example.com"]'

        result = google_official_search(query, num_results)
        print(result)
        self.assertEqual(result, expected_result)

    @patch(patch_func1)
    def test_negative_search_no_results(self, mock_build):
        mock_service = MagicMock()
        mock_build.return_value = mock_service
        mock_service.cse().list().execute.return_value = {}

        query = "test query"
        num_results = 2
        expected_result = '[]'

        result = google_official_search(query, num_results)
        self.assertEqual(result, expected_result)

    @patch(patch_func1)
    def test_error_invalid_api_key(self, mock_build):
        mock_service = MagicMock()
        mock_build.return_value = mock_service
        error_content = '{"error": {"code": 403, "message": "invalid API key"}}'
        mock_service.cse().list().execute.side_effect = HttpError(resp=None, content=error_content.encode())

        query = "test query"
        num_results = 2
        expected_result = "Error: The provided Google API key is invalid or missing."

        result = google_official_search(query, num_results)
        self.assertEqual(result, expected_result)

    @patch(patch_func1)
    def test_error_other_http_error(self, mock_build):
        mock_service = MagicMock()
        mock_build.return_value = mock_service
        error_content = '{"error": {"code": 500, "message": "Internal Server Error"}}'
        mock_service.cse().list().execute.side_effect = HttpError(resp=None, content=error_content.encode())

        query = "test query"
        num_results = 2
        expected_result = "Error: <HttpError 500 when requesting None returned \"Internal Server Error\">"

        result = google_official_search(query, num_results)
        self.assertEqual(result, expected_result)

    def test_edge_case_empty_query(self):
        query = ""
        num_results = 2
        expected_result = '[]'

        with patch(patch_func1) as mock_build:
            mock_service = MagicMock()
            mock_build.return_value = mock_service
            mock_service.cse().list().execute.return_value = {}

            result = google_official_search(query, num_results)
            self.assertEqual(result, expected_result)

if __name__ == "__main__":
    unittest.main()
