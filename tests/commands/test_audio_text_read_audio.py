# Date: 2023-5-13
# Author: Generated by GoCodeo.


import unittest
from unittest.mock import patch, MagicMock
from io import BytesIO
import json
from autogpt.commands.audio_text import read_audio, CFG

patch_func1 = 'autogpt.commands.audio_text.read_audio'


class TestReadAudio(unittest.TestCase):

    @patch("requests.post")
    def test_positive_read_audio(self, mock_post):
        # Positive Test
        audio_data = b"test_audio_data"
        mock_response = MagicMock()
        mock_response.content.decode.return_value = json.dumps({"text": "Hello, world!"})
        mock_post.return_value = mock_response

        result = read_audio(audio_data)
        self.assertEqual(result, "The audio says: Hello, world!")
        mock_post.assert_called_once_with(
            f"https://api-inference.huggingface.co/models/{CFG.huggingface_audio_to_text_model}",
            headers={"Authorization": f"Bearer {CFG.huggingface_api_token}"},
            data=audio_data,
        )

    @patch("requests.post")
    def test_negative_read_audio(self, mock_post):
        # Negative Test
        audio_data = b"test_audio_data"
        mock_response = MagicMock()
        mock_response.content.decode.return_value = json.dumps({"text": ""})
        mock_post.return_value = mock_response

        result = read_audio(audio_data)
        self.assertEqual(result, "The audio says: ")
        mock_post.assert_called_once_with(
            f"https://api-inference.huggingface.co/models/{CFG.huggingface_audio_to_text_model}",
            headers={"Authorization": f"Bearer {CFG.huggingface_api_token}"},
            data=audio_data,
        )

    def test_error_read_audio(self):
        # Error Test
        original_api_token = CFG.huggingface_api_token
        CFG.huggingface_api_token = None

        with self.assertRaises(ValueError):
            read_audio(b"test_audio_data")

        CFG.huggingface_api_token = original_api_token

    def test_edge_read_audio_empty_audio(self):
        # Edge Test
        with self.assertRaises(ValueError):
            read_audio(b"")

if __name__ == "__main__":
    unittest.main()