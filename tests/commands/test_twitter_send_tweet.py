# Date: 2023-5-13
# Author: Generated by GoCodeo.


import os
import unittest
from unittest.mock import MagicMock, patch
import tweepy
from autogpt.commands.twitter import send_tweet

class TestSendTweet(unittest.TestCase):

    @patch("tweepy.API")
    @patch("tweepy.OAuthHandler")
    def test_send_tweet_positive(self, mock_auth, mock_api):
        # Positive test
        tweet_text = "This is a test tweet."
        mock_auth.return_value = MagicMock()
        mock_api.return_value.update_status.return_value = MagicMock()

        result = send_tweet(tweet_text)
        self.assertEqual(result, "Tweet sent successfully!")

    @patch("tweepy.API")
    @patch("tweepy.OAuthHandler")
    def test_send_tweet_error(self, mock_auth, mock_api):
        # Error test
        tweet_text = "This is a test tweet."
        mock_auth.return_value = MagicMock()
        mock_api.return_value.update_status.side_effect = tweepy.TweepyException("Error occurred")

        result = send_tweet(tweet_text)
        self.assertEqual(result, "Error sending tweet: Error occurred")

    @patch("tweepy.API")
    @patch("tweepy.OAuthHandler")
    def test_send_tweet_edge_empty_string(self, mock_auth, mock_api):
        # Edge test
        tweet_text = ""
        mock_auth.return_value = MagicMock()
        mock_api.return_value.update_status.return_value = MagicMock()

        result = send_tweet(tweet_text)
        self.assertEqual(result, "Tweet sent successfully!")

if __name__ == "__main__":
    unittest.main()