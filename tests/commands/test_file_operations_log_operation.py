# Date: 2023-5-13
# Author: Generated by GoCodeo.


import unittest
from unittest.mock import patch, MagicMock
from autogpt.commands.file_operations import log_operation, CFG
patch_func1 = 'autogpt.commands.file_operations.append_to_file'
patch_func2 = 'autogpt.logs.logger.debug'
patch_func3 = 'autogpt.commands.file_operations.FG.file_logger_path'
class TestLogOperation(unittest.TestCase):

    @patch(patch_func2)
    @patch(patch_func1)
    def test_positive_log_operation_without_checksum(self, mock_append_to_file, mock_logger_debug):
        operation = "CREATE"
        filename = "test.txt"

        log_operation(operation, filename)

        mock_logger_debug.assert_called_once_with("Logging file operation: CREATE: test.txt")
        mock_append_to_file.assert_called_once_with(CFG.file_logger_path, "CREATE: test.txt\n", should_log=False)

    @patch(patch_func2)
    @patch(patch_func1)
    def test_positive_log_operation_with_checksum(self, mock_append_to_file, mock_logger_debug):
        operation = "CREATE"
        filename = "test.txt"
        checksum = "1234567890"

        log_operation(operation, filename, checksum)

        mock_logger_debug.assert_called_once_with("Logging file operation: CREATE: test.txt #1234567890")
        mock_append_to_file.assert_called_once_with(CFG.file_logger_path, "CREATE: test.txt #1234567890\n", should_log=False)

    @patch(patch_func2)
    @patch(patch_func1)
    def test_negative_log_operation_empty_operation(self, mock_append_to_file, mock_logger_debug):
        operation = ""
        filename = "test.txt"

        log_operation(operation, filename)
        mock_logger_debug.assert_called_once_with("Logging file operation: : test.txt")
        mock_append_to_file.assert_called_once_with(CFG.file_logger_path, ": test.txt\n", should_log=False)

    @patch(patch_func2)
    @patch(patch_func1)
    def test_negative_log_operation_empty_filename(self, mock_append_to_file, mock_logger_debug):
        operation = "CREATE"
        filename = ""

        log_operation(operation, filename)

        mock_logger_debug.assert_called_once_with("Logging file operation: CREATE: ")
        mock_append_to_file.assert_called_once_with(CFG.file_logger_path, "CREATE: \n", should_log=False)

    @patch(patch_func2)
    @patch(patch_func1)
    def test_edge_log_operation_long_filename(self, mock_append_to_file, mock_logger_debug):
        operation = "CREATE"
        filename = "a" * 255
        checksum = "1234567890"

        log_operation(operation, filename, checksum)

        mock_logger_debug.assert_called_once_with(f"Logging file operation: CREATE: {'a' * 255} #1234567890")
        mock_append_to_file.assert_called_once_with(CFG.file_logger_path, f"CREATE: {'a' * 255} #1234567890\n", should_log=False)

if __name__ == '__main__':
    unittest.main()
