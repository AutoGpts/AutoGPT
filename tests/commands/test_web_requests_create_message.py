# Date: 2023-5-13
# Author: Generated by GoCodeo.


import unittest
from unittest.mock import MagicMock
from autogpt.commands.web_requests import create_message

class TestCreateMessage(unittest.TestCase):

    # Positive test
    def test_create_message_valid_input(self):
        chunk = "This is a sample chunk of text."
        question = "What is the sample about?"
        expected_output = {
            "role": "user",
            "content": '"""This is a sample chunk of text.""" Using the above text, answer the following question: "What is the sample about?" -- if the question cannot be answered using the text, summarize the text.'
        }
        self.assertEqual(create_message(chunk, question), expected_output)

    # Negative test
    def test_create_message_empty_chunk(self):
        chunk = ""
        question = "What is the sample about?"
        expected_output = {
            "role": "user",
            "content": '"""""" Using the above text, answer the following question: "What is the sample about?" -- if the question cannot be answered using the text, summarize the text.'
        }
        self.assertEqual(create_message(chunk, question), expected_output)

    # Negative test
    def test_create_message_empty_question(self):
        chunk = "This is a sample chunk of text."
        question = ""
        expected_output = {
            "role": "user",
            "content": '"""This is a sample chunk of text.""" Using the above text, answer the following question: "" -- if the question cannot be answered using the text, summarize the text.'
        }
        self.assertEqual(create_message(chunk, question), expected_output)

    # Edge test
    def test_create_message_max_length_chunk(self):
        chunk = "A" * 1000
        question = "What is the sample about?"
        expected_output = {
            "role": "user",
            "content": f'"""{"A" * 1000}""" Using the above text, answer the following question: "What is the sample about?" -- if the question cannot be answered using the text, summarize the text.'
        }
        self.assertEqual(create_message(chunk, question), expected_output)

    # Edge test
    def test_create_message_max_length_question(self):
        chunk = "This is a sample chunk of text."
        question = "A" * 1000
        expected_output = {
            "role": "user",
            "content": f'"""This is a sample chunk of text.""" Using the above text, answer the following question: "{"A" * 1000}" -- if the question cannot be answered using the text, summarize the text.'
        }
        self.assertEqual(create_message(chunk, question), expected_output)

if __name__ == '__main__':
    unittest.main()