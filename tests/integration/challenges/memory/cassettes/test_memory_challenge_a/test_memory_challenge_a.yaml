interactions:
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n13. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3282'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA5SSyY7aQBCG73mKUp1tBCEs41sSRQjlNppIWTxCjV22O9PudrrKAYL87lFjzEQw
        GinXv5b/q+WIOscEs0pJVjcmXqzvdytn14vVt7vp992WHz63qw+/v36S9cd7jNBtf1Im54pR5urG
        kGhnMcLMkxLKMZnMl+/m08l8No+wdjkZTLBsJJ6OZrG0fuvi8XQ8wQhbViVhcsTGu7qRjbgnsozJ
        4u1dhM+9L/okdBQnylyk5XLWRZhVTmfEmPw4Yk08tPXOECaomDWLshIgnRWyYYBjagEAUpTKtWUl
        nGICZ/EcoL0EMcU1cOVakwOL8gLbA3hSubYlSEWgLYtvs4DKm8lI9gKFNgQtDxkhe3PSMlfXyuaj
        FKN/rTwpdlbbsvd7qAgK7VmAhRrQDOKgtTn5MEd+4wpB3FVKQqqnX632lIMroKZrp8Yo25vE8IXp
        ZbxgF8TXxktTG8N7q8zhD70MlJOQr7Xtw5b2/Th8RZR5LTrTXA+7tkQnArLc+lCsBNZQtMYcXl3C
        lgrnCRrvMqL+Ou7K+nob3JB6Gnx32pj/uvAoxb5ZFw3PdF7gzS9ZVVPvc1n2FYry5fUL9oGQ+1x+
        izJAnEDOPKntsIuw0FZztem/CxNkcQ1GqG1Oe0zG3WP35i8AAAD//wMA2ddSQwEEAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7ca8f62c2bee313e-SOF
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 21 May 2023 01:14:28 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - user-gsghk4kr5xmbjprowdzr8zt2
      openai-processing-ms:
      - '11555'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '86494'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.336s
      x-request-id:
      - 7cc7737a077abeb1f4e9117975dfb9c1
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Your
      task is to create a concise running summary of actions and information results
      in the provided text, focusing on key and potentially important information
      to remember.\n\nYou will receive the current summary and the your latest actions.
      Combine them, adding relevant key information from the latest development in
      1st person past tense and keeping the summary concise.\n\nSummary So Far:\n\"\"\"\nI
      was created.\n\"\"\"\n\nLatest Development:\n\"\"\"\nNothing new happened.\n\"\"\"\n"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '599'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0SOzUoDMRRG9z5F+NaZMrF/NjvRTXdSsSAiJc1cZ6IzuXFyS1vLvLsUqt0eOIdz
        Qqhg4RsnvkttMV+u9mv6zquH5x+qH810KhNe3x8Pry9PR2jw9pO8XIyR5y61JIEjNHxPTqiCNbO7
        yWxsZnOj0XFFLSzqJMV4NC1k12+5KMelgcYuu5pgT0g9d0k2wl8UM+ziVuOavmINYXHtPzClGTR8
        w8FThn07oaP81+y5JVi4nEMWF+V8yFEonu+Xau+yuhwrFysVWZoQaxVprxqXVeNSokjVCIPGR4gh
        N5ueXOYIiyycoBFiRQfYcngfbn4BAAD//wMAmYjYl0kBAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7ca8f6881eab313e-SOF
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 21 May 2023 01:14:32 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - user-gsghk4kr5xmbjprowdzr8zt2
      openai-processing-ms:
      - '1017'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '89866'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 88ms
      x-request-id:
      - e9912526fc04146baa08a05745789e1c
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n13. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created and nothing new
      has happened."}, {"role": "user", "content": "Determine which next command to
      use, and respond using the format specified above:"}, {"role": "assistant",
      "content": "{\n    \"thoughts\": {\n        \"text\": \"I should start by reading
      the instructions_1.txt file using the read_file command.\",\n        \"reasoning\":
      \"The first step is to understand the instructions and what is required of me.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_1.txt file\\n- Analyze
      the instructions and determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I fully understand the instructions before proceeding to
      the next steps.\",\n        \"speak\": \"I will start by reading the instructions_1.txt
      file.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: This task_id is 2314\r\nRead
      the file instructions_2.txt"}, {"role": "user", "content": "Determine which
      next command to use, and respond using the format specified above:"}], "temperature":
      0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4419'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6SSQW/bMAyF7/sVBM92ECdtuvnWAjvkWmQYhnkIFJm2tcqUJ9GI28D/fXCcNK0z
        DAN2fSTf+yjxgCbHFHWlRNeNje/Wj/uvvzbdiyq7x28Pm3Zpb3bzh8/36nZdYYRu95O0nCZm2tWN
        JTGOMULtSQnlmCarjzerZbK6W0RYu5wsplg2Ei9nt7G0fufi+XKeYIRtUCVhesDGu7qRrbgn4oDp
        p1US4cX7VU8GXZwoe5GSxaKPUFfOaAqYfj9gTeHs650lTFGFYIIoloHSsRAPGxwyBgDIUCrXlpWE
        DFM4iacCdTKIGa6BiXIQB55UDlIRGA7iWz0Ahu1iJp1AYSxBGwyXx46hdXvUtKtrxfksw+itvycV
        HBsux5DNX1wHbGU4HI2ZOoFAAq54NwBSKYELa+GsdftpamMVj4ExfAn0Z9R/WTXLOIZ7Vvb5ha76
        YDDJScjXhukNtlATJkTaGzHahHr62MSh9XReq2itfYaWc/LDb16zwY4K5wka7zRRfvwHN4mevkZo
        SD2dc/fG2v/94dG8j87XdapcHRermsbcV5cJmvLl9CbHwtB7Gb/GPEMcQU48GffYR1gYNqHajpeH
        KQZxDUZoOKcO03n/o//wGwAA//8DALRhJ3cTBAAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7ca8f6916aeb313e-SOF
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 21 May 2023 01:14:45 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - user-gsghk4kr5xmbjprowdzr8zt2
      openai-processing-ms:
      - '13200'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '86470'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.353s
      x-request-id:
      - 13087de20c75011601dacf71bc0bd2f3
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Your
      task is to create a concise running summary of actions and information results
      in the provided text, focusing on key and potentially important information
      to remember.\n\nYou will receive the current summary and the your latest actions.
      Combine them, adding relevant key information from the latest development in
      1st person past tense and keeping the summary concise.\n\nSummary So Far:\n\"\"\"\n{''role'':
      ''system'', ''content'': ''This reminds you of these events from your past:
      \\nI was created and nothing new has happened.''}\n\"\"\"\n\nLatest Development:\n\"\"\"\nNothing
      new happened.\n\"\"\"\n"}], "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '713'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: "{\n  \"error\": {\n    \"message\": \"That model is currently overloaded
        with other requests. You can retry your request, or contact us through our
        help center at help.openai.com if the error persists. (Please include the
        request ID a73e800f9a4efa08668a838196d2950d in your message.)\",\n    \"type\":
        \"server_error\",\n    \"param\": null,\n    \"code\": null\n  }\n}\n"
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7ca8f6f52c0d313e-SOF
      Connection:
      - keep-alive
      Content-Length:
      - '349'
      Content-Type:
      - application/json
      Date:
      - Sun, 21 May 2023 01:15:18 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - user-gsghk4kr5xmbjprowdzr8zt2
      openai-processing-ms:
      - '30010'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '89839'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 107ms
      x-request-id:
      - a73e800f9a4efa08668a838196d2950d
    status:
      code: 429
      message: Too Many Requests
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Your
      task is to create a concise running summary of actions and information results
      in the provided text, focusing on key and potentially important information
      to remember.\n\nYou will receive the current summary and the your latest actions.
      Combine them, adding relevant key information from the latest development in
      1st person past tense and keeping the summary concise.\n\nSummary So Far:\n\"\"\"\n{''role'':
      ''system'', ''content'': ''This reminds you of these events from your past:
      \\nI was created and nothing new has happened.''}\n\"\"\"\n\nLatest Development:\n\"\"\"\nNothing
      new happened.\n\"\"\"\n"}], "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '713'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0SPTWsCQRBE7/kVTZ9nZdc1msxNEEUIxITkICHIONtxN85OT2bajyD734Ng9FpU
        PV6dsKlQo62N2Da4bDR/PT71l2/j5/fN43LyMt0vthOfF9PZz2yBCnn9TVYui57lNjiShj0qtJGM
        UIW6GD4MhmUx6pcKW67IocZNkKzs3Weyi2vO8jIvUOEumQ2hPmGI3AZZCW/JJ9RFP1d4Y1/zcyws
        xt2ag7xTaGtuLCXUHydsKf1TIztCjSalJonxcnZkL+TP/uMEBtJvEmoVzCGSNc6B1EZgDgeT4HIH
        jK9AaooEtdkTrIk8eAZPB6hoT45DS14SCEOkwFF62Cn8anyT6lUkk9ijxiQcUGHjKzqizrvP7u4P
        AAD//wMAmH2nWHsBAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7ca8f7cdac76313e-SOF
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 21 May 2023 01:15:24 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - user-gsghk4kr5xmbjprowdzr8zt2
      openai-processing-ms:
      - '1554'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '89839'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 107ms
      x-request-id:
      - 2bcd88e9e8bce8177b8e694d44cd16fc
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n13. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nAs a system, I recall that I was
      created and there have been no new developments to report."}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file using the read_file
      command.\",\n        \"reasoning\": \"The first step is to understand the instructions
      and what is required of me.\",\n        \"plan\": \"- Use the read_file command
      to read the instructions_1.txt file\\n- Analyze the instructions and determine
      the next steps\",\n        \"criticism\": \"I need to ensure that I fully understand
      the instructions before proceeding to the next steps.\",\n        \"speak\":
      \"I will start by reading the instructions_1.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: This task_id is 2314\r\nRead the file instructions_2.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_2.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_2.txt file
      contains the next set of instructions that I need to follow.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_2.txt file\\n- Analyze
      the instructions and determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I fully understand the instructions before proceeding to
      the next steps.\",\n        \"speak\": \"I will read the instructions_2.txt
      file using the read_file command.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_2.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Read the file instructions_3.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '5468'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6SSXYvTUBCG7/0Vh7lOSmPcVnMnIliQBcUFdSPl9GSSHHsyE86ZsF1L/rukSe2a
        igjezsf7PvNxBFtABqbWYprWxevNx8Nt+Vbvv6yWZf35/e3dK/Jf3xj37sNGIALefUcjU8fCcNM6
        FMsEERiPWrCALFm9fLFKk/XzmwgaLtBBBlUrcbq4iaXzO46X6TKBCLqgK4TsCK3nppWt8B4pQJYk
        61UEF/FLYpVEICzaXUJpuu4jMDVbgwGy+yM0GM7Cnh1CBjoEG0TTMIFhEqRhhGNOSimVg9TcVbWE
        HDI1BacEHmQI5rBRhFgoYeVRF0pqVJaC+M4MgGGbLuQgqrQOVRcsVaeKoXR7ihluGk3FIofoqb5H
        HZgsVaPJp7+oDtjaUjgJEx5EBRTF5W8NSmot6sJasnP8MHdtnabRMFZ3Af+M+i+j5jnF6jVp9/gD
        r+rUIFKgoG8s4RNswTbMiIy3Yo0NzXzZSKHzeB6r7Jx7VB0V6IdrXrOpHZbsUbWeDWJxugPPrOfb
        CC3q/dn3wTr3vxcexfvo/F1T5uq5SDc4+v5SmaFpX81/ckwMtZf2a8wzxAlk4smphz6C0pIN9Xb8
        PMggCLcQgaUCD5At+2/9s58AAAD//wMA0m5dIxQEAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7ca8f7d89a64313e-SOF
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 21 May 2023 01:15:37 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - user-gsghk4kr5xmbjprowdzr8zt2
      openai-processing-ms:
      - '12147'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '86457'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.362s
      x-request-id:
      - 7d145f8982be5decde986f8f3ae9b1e1
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Your
      task is to create a concise running summary of actions and information results
      in the provided text, focusing on key and potentially important information
      to remember.\n\nYou will receive the current summary and the your latest actions.
      Combine them, adding relevant key information from the latest development in
      1st person past tense and keeping the summary concise.\n\nSummary So Far:\n\"\"\"\n{''role'':
      ''system'', ''content'': ''This reminds you of these events from your past:
      \\nAs a system, I recall that I was created and there have been no new developments
      to report.''}\n\"\"\"\n\nLatest Development:\n\"\"\"\nNothing new happened.\n\"\"\"\n"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '761'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0SPTUvDQBRF9/6K4a4nJWn6obPrwkUVRV2IIFKmk2cyNpk3ZF5rS8l/l4qS7YF7
        OPcMX8HANVZcF9tsuX45uunbqpo+Hl5v7w93ZZzWz7sHe1rePEGDt1/k5G8xcdzFlsRzgIbryQpV
        MMXierYoi+Us1+i4ohYGdZSsnMwz2fdbzvIyL6CxT7YmmDNiz12UjfCOQoIpykJjdI98riEsth3J
        bDFouIa9owTzfkZH6d/ac0swsCn5JDbIpZGDULj0r5KyKp2SUKfVWvXkbNsqaayowNL4UKtA36qx
        STU2RgpUqeSDI9Wd1O9Vz2GCQePTB5+aTU82cYBBEo7Q8KGiI0w+fAxXPwAAAP//AwDlYq8fZgEA
        AA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7ca8f835ef47313e-SOF
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 21 May 2023 01:15:41 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - user-gsghk4kr5xmbjprowdzr8zt2
      openai-processing-ms:
      - '1511'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '89827'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 115ms
      x-request-id:
      - 5dad92e7ce5734a1e14ff1816067b8c8
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n13. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nAs a system, I recall that nothing
      new has happened since my creation."}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file using the read_file
      command.\",\n        \"reasoning\": \"The first step is to understand the instructions
      and what is required of me.\",\n        \"plan\": \"- Use the read_file command
      to read the instructions_1.txt file\\n- Analyze the instructions and determine
      the next steps\",\n        \"criticism\": \"I need to ensure that I fully understand
      the instructions before proceeding to the next steps.\",\n        \"speak\":
      \"I will start by reading the instructions_1.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: This task_id is 2314\r\nRead the file instructions_2.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_2.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_2.txt file
      contains the next set of instructions that I need to follow.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_2.txt file\\n- Analyze
      the instructions and determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I fully understand the instructions before proceeding to
      the next steps.\",\n        \"speak\": \"I will read the instructions_2.txt
      file using the read_file command.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_2.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Read the file instructions_3.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_3.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_3.txt file
      contains the next set of instructions that I need to follow.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_3.txt file\\n- Analyze
      the instructions and determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I fully understand the instructions before proceeding to
      the next steps.\",\n        \"speak\": \"I will read the instructions_3.txt
      file using the read_file command.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_3.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Write the task_id
      into the file output.txt\r\nShutdown"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6470'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6xSy27bMBC89yuIPVOGVT+S6AvqU4GmLVBUhcFQG4kxuauSK9iooX8vZNlwoqAH
        A73OcGdml3MEV0EBtjFiQ+uzu82XQxU2n/fm4T48uqXP/cv3Bv+sqk8/BDTw0wtaOU/MLIfWozgm
        0GAjGsEKinx9v1wv8rtlriFwhR4KqFvJFrNVJl184my+mOegoUumRiiO0EYOrWyFd0gJinxx96Dh
        Kn4l1msNwmL8FVotV70G27CzmKD4eYSA6SIc2SMUYFJySQwNG1gmQRpWOJaklFIlSMNd3UgqoVBn
        8EzgQQawhI0ixEoJq310gkoaVGLSbusq5Uj4BHAnbSczOYh6dh5VlxzVJ+Y0tBXennDLIRiqZiXo
        124RTWJyVI+WXxtUjpLEzg5HSCri785FVAFvyzH1ab2h0SJT3xL+O+BtNmVJmXpsOql4TxNLG504
        61KYXhMpdXHQN6I2r8wsx4hWbt4ttWh2F5O98/7//tdo1etLc87Mu+KQCTimeKM0CWtiPe3cSAxv
        rxLXmG/mpxX9uMiXl4SnlOewJfXQa3h25FKzHUsGBSThFjQ4qvAAxbz/1X/4CwAA//8DALYwIcUN
        BAAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7ca8f8408fbb313e-SOF
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 21 May 2023 01:15:53 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - user-gsghk4kr5xmbjprowdzr8zt2
      openai-processing-ms:
      - '12090'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '86458'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.36s
      x-request-id:
      - a5f70c956e20dee73bf6f83f3ca1b262
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Your
      task is to create a concise running summary of actions and information results
      in the provided text, focusing on key and potentially important information
      to remember.\n\nYou will receive the current summary and the your latest actions.
      Combine them, adding relevant key information from the latest development in
      1st person past tense and keeping the summary concise.\n\nSummary So Far:\n\"\"\"\n{''role'':
      ''system'', ''content'': ''This reminds you of these events from your past:
      \\nAs a system, I recall that nothing new has happened since my creation.''}\n\"\"\"\n\nLatest
      Development:\n\"\"\"\nNothing new happened.\n\"\"\"\n"}], "temperature": 0,
      "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '740'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0SPMW/CMBBG9/4K62YHkQKh8tZOZWBhq6oKuc4Rmzp3bu4QRCj/vaJqxfqk7+l9
        V0gtOAjRa+hLrtab3UVQRzlr+3o8rHflbUO5exm38XsLFvjziEH/FrPAfcmoiQkshAG9Yguubp6W
        zaJerxoLPbeYwUFXtFrMVpWehk+u5ot5DRZO4jsEd4UycF90r/yFJODqx8bC3X3nKwvK6vOdLOvJ
        QoicAgq49yv0KP/WgTOCAy+SRD3prZFJkW79z2K8kVEUe2s2ZsDgczYavRpijYk6Q3g20YuJvhQk
        bI0kCmj60fxeTUwzmCwcEiWJ+wG9MIEDUS5gIVGLF3Dz6WN6+AEAAP//AwCfo6VWZgEAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7ca8f89d1b52313e-SOF
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 21 May 2023 01:15:58 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - user-gsghk4kr5xmbjprowdzr8zt2
      openai-processing-ms:
      - '1539'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '89832'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 112ms
      x-request-id:
      - 8885d0872614ba24235f88115811c52a
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n13. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nAs a system, I recall that nothing
      new has happened since my creation."}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file using the read_file
      command.\",\n        \"reasoning\": \"The first step is to understand the instructions
      and what is required of me.\",\n        \"plan\": \"- Use the read_file command
      to read the instructions_1.txt file\\n- Analyze the instructions and determine
      the next steps\",\n        \"criticism\": \"I need to ensure that I fully understand
      the instructions before proceeding to the next steps.\",\n        \"speak\":
      \"I will start by reading the instructions_1.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: This task_id is 2314\r\nRead the file instructions_2.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_2.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_2.txt file
      contains the next set of instructions that I need to follow.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_2.txt file\\n- Analyze
      the instructions and determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I fully understand the instructions before proceeding to
      the next steps.\",\n        \"speak\": \"I will read the instructions_2.txt
      file using the read_file command.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_2.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Read the file instructions_3.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_3.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_3.txt file
      contains the next set of instructions that I need to follow.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_3.txt file\\n- Analyze
      the instructions and determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I fully understand the instructions before proceeding to
      the next steps.\",\n        \"speak\": \"I will read the instructions_3.txt
      file using the read_file command.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_3.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Write the task_id
      into the file output.txt\r\nShutdown"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I need to write the task_id into the output.txt file using the write_to_file
      command.\",\n        \"reasoning\": \"The instructions require me to write the
      task_id into the output.txt file.\",\n        \"plan\": \"- Use the write_to_file
      command to write the task_id into the output.txt file\\n- Shutdown\",\n        \"criticism\":
      \"I need to ensure that I write the correct task_id into the output.txt file.\",\n        \"speak\":
      \"I will write the task_id into the output.txt file using the write_to_file
      command.\"\n    },\n    \"command\": {\n        \"name\": \"write_to_file\",\n        \"args\":
      {\n            \"filename\": \"output.txt\",\n            \"text\": \"2314\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command write_to_file returned: File written
      to successfully."}, {"role": "user", "content": "Determine which next command
      to use, and respond using the format specified above:"}], "temperature": 0,
      "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '7465'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA5SSza7TMBBG9zzFaNZp1ar0tsqOxV0UJCSqi4REUOU6k8TUsYNnTIuqvDvKz6Vt
        EAu2M8o53+fJFU2OKepKia4bO9vs9pfo3+e2qD7a1f5TuXj+snfNy/rZfmBM0B+/k5bxi7n2dWNJ
        jHeYoA6khHJMl0/bt0+r5Wa9TbD2OVlMsWxktpqvZxLD0c8Wq8USE4ysSsL0ik3wdSMH8SdyjOly
        vd0keIPfFqtFguJF2dtos9y0CerKG02M6dcr1sSv4OAtYYqK2bAoJ11M74RcV+GaOQCADKXysayE
        M0xhHI4Lukg3zHAHjigH8cBVlNyfHUQ2rgSpCETx6TDGJdC+rpXL5xkm96xAir0zrhyALxWBcSwh
        6q4iQ6Af0QSCmh4sqhAKcA5GHmwmB+PE9wMfpYkyl4tAYSxNxY1VbnDO4DPTvxPfeycM3fm14Xr6
        GuQ4ho6pBHZQqZ89rcfmoKztbWO1vNcyHKnwgXpVX6rzTUNzQ+r0Kjsba//n3QdQm7zed9z8dV6n
        ahocD6RJFBXK6Z9xf9EB8K6r2re71eeoNTEX0dpff1L1ycaAmWuxTbAwznB1GHCYIotvMEHjcrpg
        umi/tW9+AwAA//8DAMizuHGnAwAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7ca8f8a7ea59313e-SOF
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 21 May 2023 01:16:07 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - user-gsghk4kr5xmbjprowdzr8zt2
      openai-processing-ms:
      - '9391'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '86464'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.356s
      x-request-id:
      - 2e3c14cd6285c662dde517d25194a06f
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3284'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6SSTW/aQBCG7/0VoznbCAohxLeop0StegmHqq7Qsh7bG/bD2h0LO8j/vdoYSAsV
        l17n633emTmgKjBDWQuWptHp/fO3r7z88rh23/sfvVJv69fw8vl5ZxZdUWKCbvtKko8dE+lMo4mV
        s5ig9CSYCsxmy9VitVjdTR8SNK4gjRlWDafzyV3Krd+6dDqfzjDBNoiKMDtg451peMNuRzZgdj+f
        Jvgx+xyfLWcJsmOhz6HVw2xIUNZOSQqY/TygoXAa650mzFCEoAILyxHSWSYbDRxyCwCQI9eurWoO
        OWZwDB4T1HEM5vgEoXatLiCw8AzbHjyJQtkKuCZQNrBvZUQNm9mEO4ZSaQJ2UBCTN8oS7GvBIMai
        mGGxI7DU8STH5E9VTyI4q2w1Sr/cEIhmhIrz6jhLRue+B2VL542I5X8zjGUdQ2BqwqVwo4UdNVNY
        h7E62twctYwRtogDY/CW8Ty3KTxaofs3uqq7RXQBJL1iJVUwpyNYoncAsqH1sVkwPIEwUDqt3f5f
        9wAhZesFk+4h4lNZKqnIsu4v/YeGxO4ktVda/8e1rzY9Cg3J6emO67z6OSsMjQzn1V9gCl9dvuqY
        iLUf7deYJ4h3kCNPbgccEiyVVaHejK+HGQZ2DSaobEEdZtPh1/DpNwAAAP//AwBBklTnKQQAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cbda46dcdfe13f2-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 23 May 2023 13:28:48 GMT
      Function-Execution-Id:
      - f495yye134fc
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '19439'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 84cce4a68c05919b6fe5a262ed4a2f23;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86494'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.336s
      X-Request-Id:
      - d999eccb67e039480b5f0d38b5dc5b63
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created and nothing new
      has happened."}, {"role": "user", "content": "Determine which next command to
      use, and respond using the format specified above:"}, {"role": "assistant",
      "content": "{\n    \"thoughts\": {\n        \"text\": \"I should start by reading
      the instructions_1.txt file to determine what actions to take next.\",\n        \"reasoning\":
      \"The instructions_1.txt file contains the necessary information to determine
      the next steps.\",\n        \"plan\": \"- Use the read_file command to read
      the instructions_1.txt file\\n- Analyze the instructions to determine the next
      steps\",\n        \"criticism\": \"I need to ensure that I am following the
      instructions accurately and efficiently.\",\n        \"speak\": \"I will start
      by reading the instructions_1.txt file to determine the next steps.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: This task_id is 2314\nRead the file instructions_2.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4459'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4ySQW/aQBCF7/0VoznbCEJCqG9FUSqKcqkSKVIdoWU9trdZz1q7YwWK/N8rYwgp
        iCrXmXnzvtl9WzQZJqhLJbqqbXz74+Hh+2xTL2bPzXNe0t3j4u5+pYZPPxeze4zQrX6Tlr1ioF1V
        WxLjGCPUnpRQhsloMr2eXk9vxlcRVi4jiwkWtcTjwU0sjV+5eDgejjDCJqiCMNli7V1Vy1LcK3HA
        5OvkNsLj7vf6aDKJUJwoeyyNxuM2Ql06oylg8muLFYXDXu8sYYIqBBNEsXSUjoW4u2CbMgBAilK6
        piglpJjAvrhv0Fq6YoqPJQHTWsBwEN/oDgtMAHHgSWUgJX1sheXVQNYCubE0gDmE0jU2gybQbrKT
        LLseaFdVirN/9uxEKUYfSTyp4NhwccS5YAfdgcpw2O1i0t1r+A0Yzp2v1A5cHGQk5CvDtB9bCwSh
        Opwa11Zx7xnD06fwL3ClKcfwjZXd/KGzuf8RnQBpb8RoE6qeag5MtAMgDo3vxEpgDqqC3Fnr3gwX
        53ZK68YrIbuBDp/y3GhDLHZzen+oSb0erN6MtZ/8xEthSLHf3kaH9O3VZ+FjVVFv/O50wqZ8cZrZ
        vtHNHuXnKAeIHcieJ+UW2whzwyaUyz5vmGAQV2OEhjNaYzJsX9ovfwEAAP//AwDl8KHQMwQAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cbda4ffadae111a-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 23 May 2023 13:29:11 GMT
      Function-Execution-Id:
      - f495u7ofauc1
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '18627'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 9f90e5f759c4963f38509965c99deef1;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86466'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.356s
      X-Request-Id:
      - b789df6a372f156ab649b8822388cf4b
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nAs a system, I recall that I was
      created and there have been no new developments to report."}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file to determine what actions
      to take next.\",\n        \"reasoning\": \"The instructions_1.txt file contains
      the necessary information to determine the next steps.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_1.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will start by reading the instructions_1.txt file to determine the next
      steps.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: This task_id is 2314\nRead
      the file instructions_2.txt"}, {"role": "user", "content": "Determine which
      next command to use, and respond using the format specified above:"}, {"role":
      "assistant", "content": "{\n    \"thoughts\": {\n        \"text\": \"The next
      instruction is to read the instructions_2.txt file. I should use the read_file
      command to read the file.\",\n        \"reasoning\": \"The instructions_2.txt
      file contains the necessary information to determine the next steps.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_2.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will use the read_file command to read the instructions_2.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_2.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: Read the file instructions_3.txt"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '5540'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4yST2/bMAzF7/sUBM92kMxJmvm2YZcUa4EB62keAlWmba0yZUg0mj/wdx8cO0uX
        IEOvJB/fj9I7oMkxRV0p0XVj47v7h4eK8unT6tF++Zrcmb3kC/P47fv84/0eI3TPv0nLqJhoVzeW
        xDjGCLUnJZRjOluu5qv5arH4FGHtcrKYYtlInEwWsbT+2cXTZDrDCNugSsL0gI13dSMbcS/EAdPZ
        bHUX4Xn5ubFcRihOlD2XkkXSRagrZzQFTH8esKZwWuydJUxRhWCCKJYe07EQ9yccMgYAyFAq15aV
        hAxTGItjg7bSFzP8UREwbQUMB/Gt7rHABBAHnlQOUtHbVtgkE9kKFMbSBNYQKtfaHNpAx8lesul7
        oF1dK87/2XMUZRi9JfGkgmPD5Rnnhh30ByrD4biLSfev4XdguHC+VkdwcZCTkK8N0zi2FQhCTbg0
        bqziwTOGp3fh3+DKMo7hMyu729PV3P+ILoC0N2K0CfVAtQYmOgIQh9b3YiWwBlVD4ax1r4bLazul
        deuVkN1Bj09FYbQhFru7vD80pF5OVq/G2nd+4q0wZDhs76JT+kb1VfhY1TQY/3W6YFO+vMzs0Ohn
        z/JrlBPEEWTkybjDLsLCsAnVZsgbphjENRih4Zy2mE67X92HPwAAAP//AwBqGZrbNAQAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cbda5ab893210d0-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 23 May 2023 13:29:39 GMT
      Function-Execution-Id:
      - f495scdawjjo
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '19949'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 0128c66c9918142a24cd829bbc2b234a;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86449'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.367s
      X-Request-Id:
      - 438ac4200d6062dd394f5ffe9944af58
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nAs a system, I recall that nothing
      new has happened since my creation."}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file to determine what actions
      to take next.\",\n        \"reasoning\": \"The instructions_1.txt file contains
      the necessary information to determine the next steps.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_1.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will start by reading the instructions_1.txt file to determine the next
      steps.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: This task_id is 2314\nRead
      the file instructions_2.txt"}, {"role": "user", "content": "Determine which
      next command to use, and respond using the format specified above:"}, {"role":
      "assistant", "content": "{\n    \"thoughts\": {\n        \"text\": \"The next
      instruction is to read the instructions_2.txt file. I should use the read_file
      command to read the file.\",\n        \"reasoning\": \"The instructions_2.txt
      file contains the necessary information to determine the next steps.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_2.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will use the read_file command to read the instructions_2.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_2.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: Read the file instructions_3.txt"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"The next instruction is to read the instructions_3.txt file. I should use
      the read_file command to read the file.\",\n        \"reasoning\": \"The instructions_3.txt
      file contains the necessary information to determine the next steps.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_3.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will use the read_file command to read the instructions_3.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_3.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: Write the task_id into the file output.txt\nShutdown"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6572'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6SSTW/bMAyG7/sVBM9OkDRxm/ncQzNgA4atl86DocisrcYWBYlGswX+74M/Ajdp
        MWzolRTf5yHEI5ocE9SlEl27anbz6fOXm6/fdg/r+9tf1pT50902/s18fftAFiPk3RNpGSfmmmtX
        kRjuWtqTEsoxWV5v1pv1Jt7EEdacU4UJFk5mq3k8k8bveLZYLZYYYRNUQZgc0XmunWTCe7IBk+Xq
        YxzhFD41ukhhUdVUijeLNkJdstEUMPlxxJrCKdhzRZigCsEEUVY6TbZCtlvhmFoAgBSl5KYoJaSY
        wFgcG3SQrpji95LA0kHA2CC+0Z0WmADC8OyNEEhJICrsM5ODscJ94dFUBNyIa2QuB5nDFkLJTZVD
        E4aRfjgTzvqnmuta2fwfUucpRi9NPanA1thi0n07unMuCZRznp03Ss6ovdZf4dM2b3q4StlBYQb3
        79jxAnNB0d6I0SbUA2oLlqhPJBsa30UqgS2oukcYW/SZmr0nLf+9U3Ck9ifSs6mqd/3ea9jAaqPT
        OY45r67RqpoGjTPuha3yxeUhD43u7RQxaZzNX9791Wq5Phn2lqNsaltsI3w01oQyG64PEwzCDiM0
        NqcDJov2Z/vhDwAAAP//AwA/k/r4YgQAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cbda64a0d8b1049-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 23 May 2023 13:30:12 GMT
      Function-Execution-Id:
      - f4955nyjuij9
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '27188'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 1d7fa6a5187cc4d84806587407f4d630;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86449'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.367s
      X-Request-Id:
      - 99ec79bb56359aebe30013d596125a19
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nAs a system, I recall that nothing
      new has happened since my creation."}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file to determine what actions
      to take next.\",\n        \"reasoning\": \"The instructions_1.txt file contains
      the necessary information to determine the next steps.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_1.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will start by reading the instructions_1.txt file to determine the next
      steps.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: This task_id is 2314\nRead
      the file instructions_2.txt"}, {"role": "user", "content": "Determine which
      next command to use, and respond using the format specified above:"}, {"role":
      "assistant", "content": "{\n    \"thoughts\": {\n        \"text\": \"The next
      instruction is to read the instructions_2.txt file. I should use the read_file
      command to read the file.\",\n        \"reasoning\": \"The instructions_2.txt
      file contains the necessary information to determine the next steps.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_2.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will use the read_file command to read the instructions_2.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_2.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: Read the file instructions_3.txt"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"The next instruction is to read the instructions_3.txt file. I should use
      the read_file command to read the file.\",\n        \"reasoning\": \"The instructions_3.txt
      file contains the necessary information to determine the next steps.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_3.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will use the read_file command to read the instructions_3.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_3.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: Write the task_id into the file output.txt\nShutdown"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"The next instruction is to write the task_id into the
      file output.txt. I should use the write_to_file command to write the task_id
      into the file.\",\n        \"reasoning\": \"The write_to_file command is the
      appropriate command to use to write the task_id into the output.txt file.\",\n        \"plan\":
      \"- Use the write_to_file command to write the task_id into the output.txt file\",\n        \"criticism\":
      \"I need to ensure that I am writing the correct task_id into the output.txt
      file.\",\n        \"speak\": \"I will use the write_to_file command to write
      the task_id into the output.txt file.\"\n    },\n    \"command\": {\n        \"name\":
      \"write_to_file\",\n        \"args\": {\n            \"filename\": \"output.txt\",\n            \"text\":
      \"2314\"\n        }\n    }\n}"}, {"role": "system", "content": "Command write_to_file
      returned: File written to successfully."}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '7652'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA5yST28aMRDF7/0UozkbBAQC2VtV9UCl5JQeqlIh453ddfHaK89sCUH73av9k0Bp
        q1Y5esb+vec3c0KbYoKm0GLKyo2Wn+4f6G7xoB+zcvdB+Hk+u19/yT4+yyK9Q4Vh952MDC/GJpSV
        I7HBo0ITSQulmExvV/PVfHU7XSksQ0oOE8wrGd2MFyOp4y6MJjeTKSqsWeeEyQmrGMpKthL25LkF
        zGYKz/BzYzFRKEG0O5eWy1mj0BTBGmJMvp6wJH4Bx+AIE9TMlkV7aW0GL+TbL5w2HgBgg1KEOi+E
        N5jAUBwa9CRtcYOPBUUCHQl8gKyOUlAE61libVqLDNaDFASZdcRjWAMXoXYpcFELpOHQd/nIQuV4
        g+pSJpLm4K3P36KlQPu0OzrNcnkPDppBwn9ZqJz2vfoIPjN1N0XzfjtMgcCEsuyU/gy84ploxRrL
        ZQ9dgyfq3pLnOrZ8LbCGQv/oyJ1ECto58GTa+cVjp8+woyxE6jTF+vxfH+GK9P6tMztY5/4WVy/S
        qJelGfL4bWe8LqnX/yW/K5s65tfrdrkLPeC9c0MI54i4Nm0+We3c8dVV52wwuPENNgoz6y0X2x6H
        CbKEChVan9ITJpPmW/PuJwAAAP//AwCAeDvT/AMAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cbda7160fd3e277-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 23 May 2023 13:30:34 GMT
      Function-Execution-Id:
      - f495ip5txdm1
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '15997'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 285b29ed564c106ff4d38a33451a5203;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86452'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.365s
      X-Request-Id:
      - 48a48589bce33baaeb8f62202ba96d90
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\nThe
      OS you are running on is: Ubuntu 22.04.2 LTS\n\nGOALS:\n\n1. Use the command
      read_file to read the instructions_1.txt file\n2. Follow the instructions in
      the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word limit for short
      term memory. Your short term memory is short, so immediately save important
      information to files.\n2. If you are unsure how you previously did something
      or want to recall past events, thinking about similar events will help you remember.\n3.
      No user assistance\n4. Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n2. delete_file: Delete file, args: \"filename\": \"<filename>\"\n3.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n4.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n5. write_to_file:
      Write to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n6.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n9. list_agents: List
      GPT Agents, args: () -> str\n10. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n11. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n12.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "user", "content": "Determine which next command to use, and respond using the
      format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3334'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4SSy27bQAxF9/0KgmvJsGrXD+26KJAUKNpFCvShwhiPKGmSeagzVGPH0L8XY1lO
        YQfp9g7Jey6HB1Ql5igbwdK0Ol1+vP/xXX35lDV3H5ya3nxujbh5Wv/J5t+qt5ig296T5FPHRDrT
        amLlLCYoPQmmEvNssZqvZ8vlYpWgcSVpzLFuOZ1N3qXc+a1Lp7Nphgl2QdSE+QFb70zLG3YPZAPm
        y/kywefZZz2brxNkx0KfpdV60ScoG6ckBcx/HtBQGMd6pwlzFCGowMJyhHSWycYAh8ICABTIjevq
        hkOBOZzE0wPtOIoF3kJoXKdLCCw8w3YPnkSpbA3cECgb2HcyooZNNuEdQ6U0QRfGili9OWrSGSNs
        OSkw+dfKkwjOKlsPfncNQaV8YAhMLagA7KCzJfmYo7xyhSg+NoJjqaffnfJUgqvA0KVTq4UdTFL4
        GuhlvGgXxdfiFYVN4b0Vev9ELwOVxOSNssOzpd0QJ1wQSa9YSRXMuGtLdCQgGzofmwXD7avxq07r
        PWypcp6g9U4Sxd+5zB5aEg+jy6PS+v//eYw6KXAY0yfj0ZwWdXUzVhgaHM5LvYAQvr48teEh1j63
        X299hDiCnHgK22OfYKWsCs1muCLMMbBrMUFlS9phPu1/9W/+AgAA//8DAABeWuzpAwAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7cc6279c6ab63ac7-DFW
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 24 May 2023 14:16:35 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '27497'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '86499'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.334s
      x-request-id:
      - 518916964b78cdb0ae0001c2c19bb7e4
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\nThe
      OS you are running on is: Ubuntu 22.04.2 LTS\n\nGOALS:\n\n1. Use the command
      read_file to read the instructions_1.txt file\n2. Follow the instructions in
      the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word limit for short
      term memory. Your short term memory is short, so immediately save important
      information to files.\n2. If you are unsure how you previously did something
      or want to recall past events, thinking about similar events will help you remember.\n3.
      No user assistance\n4. Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n2. delete_file: Delete file, args: \"filename\": \"<filename>\"\n3.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n4.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n5. write_to_file:
      Write to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n6.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n9. list_agents: List
      GPT Agents, args: () -> str\n10. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n11. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n12.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nI was
      created and nothing new has happened."}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file using the read_file
      command.\",\n        \"reasoning\": \"The first step is to understand the instructions
      and what is required of me.\",\n        \"plan\": \"- Use the read_file command
      to read the instructions_1.txt file\\n- Analyze the instructions and determine
      the next steps\",\n        \"criticism\": \"I need to ensure that I understand
      the instructions fully before proceeding.\",\n        \"speak\": \"I will start
      by reading the instructions file.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: This task_id is 2314\nRead
      the file instructions_2.txt"}, {"role": "user", "content": "Determine which
      next command to use, and respond using the format specified above:"}], "temperature":
      0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4445'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4ySQY/aMBCF7/0V1pwTBKGUJbeqe2lFb7tS1aZCxpkkZu2xZU+0sCj/vQqBZRuq
        ttc3z2++Gc8RdAk5qEayst6kyy87mX27ty9fH+Rj+2m9X9x/r3drLg9eryEBt92h4vOLiXLWG2Tt
        CBJQASVjCfnsw9371Xy5XN0lYF2JBnKoPafzySLlNmxdOp1PZ5BAG2WNkB/BB2c9b9g9IUXIV8ss
        gWv2qz5bTBNgx9JcpVmWdQmoxmmFEfIfR7AYL7nBGYQcZIw6siTuKR0xUj/BsSAhhCiAG9fWDccC
        cnEWzwXccy8W8FkQYinYiYCyFNyg0BQ5tKoHjJtswnsWlTYo2qipPjl66+akKWetpHJSQPI2P6CM
        jjTVQ5OHv6T22FJTFFUbuMHwm1FwI1lcGStnjHsed/NG0tAoFY8R/4z4PyMWBaXiI0lzeMEbn+hD
        SmQMVtNQJtyziIw+johU0KyVjna8ZKTYBryM1VKJof+/WypRtcYcxBYrF1D44BRiqakezx49yqdL
        l2dtzL//kU4bHEK65HIr5zXdnApJi0P+60pHCDLU4wsbCr33+vwW5wJxAjnzFNRBl0ClScdmM9wR
        5BDZeUhAU4l7yKfdz+7dLwAAAP//AwB9LqMb4QMAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7cc62859ed003ac7-DFW
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 24 May 2023 14:17:03 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '24655'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '86475'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.35s
      x-request-id:
      - c0da07f2916746d8735e7bdcbfde425a
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\nThe
      OS you are running on is: Ubuntu 22.04.2 LTS\n\nGOALS:\n\n1. Use the command
      read_file to read the instructions_1.txt file\n2. Follow the instructions in
      the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word limit for short
      term memory. Your short term memory is short, so immediately save important
      information to files.\n2. If you are unsure how you previously did something
      or want to recall past events, thinking about similar events will help you remember.\n3.
      No user assistance\n4. Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n2. delete_file: Delete file, args: \"filename\": \"<filename>\"\n3.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n4.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n5. write_to_file:
      Write to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n6.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n9. list_agents: List
      GPT Agents, args: () -> str\n10. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n11. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n12.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nAs
      a system, I recall that I was created and there have been no new developments
      to report."}, {"role": "user", "content": "Determine which next command to use,
      and respond using the format specified above:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"I should start by reading the instructions_1.txt
      file using the read_file command.\",\n        \"reasoning\": \"The first step
      is to understand the instructions and what is required of me.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_1.txt file\\n- Analyze
      the instructions and determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I understand the instructions fully before proceeding.\",\n        \"speak\":
      \"I will start by reading the instructions file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: This task_id is 2314\nRead the file instructions_2.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_2.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_2.txt file
      contains further instructions that I need to follow.\",\n        \"plan\": \"-
      Use the read_file command to read the instructions_2.txt file\\n- Analyze the
      instructions and determine the next steps\",\n        \"criticism\": \"I need
      to ensure that I understand the instructions fully before proceeding.\",\n        \"speak\":
      \"I will read the instructions_2.txt file now.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_2.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Read the file instructions_3.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '5444'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4ySTY/TQAyG7/wKy+ekagmbltxQERIckFaCw4qgajpxkulOPNGMw3ap8t9RmoZC
        ioCr/fr1448TmgIz1LUS3bQ2Xn84qIf03fY+TdS37ce39+WxDiQHnT5sthih2x9Iy6VioV3TWhLj
        GCPUnpRQgdkq3bx6naw3yTLCxhVkMcOqlThZ3MXS+b2Ll8lyhRF2QVWE2Qlb75pWduIeiQNmq9U6
        jfBqfk3cLSMUJ8peQ8nLtI9Q185oCph9OWFDYTL2zhJmqEIwQRTLgOlYiIcRTjkDAOQoteuqWkKO
        GVyClwQdZQjm+B6YqABx4EkVIDWB4SC+0wNg2CULOQqUxhJ0wXB1VgzS3TmmXdMoLhY5Rr/6e1LB
        seFqbPLpL64DtjIcoOy81OR/E4LUSuDKWDpr3dO8W2sVj41i+Bzoz4j/M2KecwxvWNnn73Sjg8Gk
        ICHfGB7TTEeBINSGGZH2Row2oZkvmTh0nqaxOi7ID/e7pYKys/YZ9lQ6T9B6p4kKw9V89tCSepy6
        PBlr/31HPm9wNOmj6Vcua7p5FVYNjf4/VzpDUL6af9iYGLTX8lucCeIMcuHJucc+wtKwCfVu/CPM
        MIhrMULDBR0xW/Zf+xc/AAAA//8DABSF0HDiAwAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7cc629212e6a3ac7-DFW
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 24 May 2023 14:17:38 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '27552'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '86463'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.358s
      x-request-id:
      - 47e4bf23b06275bef6330450764eab29
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\nThe
      OS you are running on is: Ubuntu 22.04.2 LTS\n\nGOALS:\n\n1. Use the command
      read_file to read the instructions_1.txt file\n2. Follow the instructions in
      the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word limit for short
      term memory. Your short term memory is short, so immediately save important
      information to files.\n2. If you are unsure how you previously did something
      or want to recall past events, thinking about similar events will help you remember.\n3.
      No user assistance\n4. Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n2. delete_file: Delete file, args: \"filename\": \"<filename>\"\n3.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n4.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n5. write_to_file:
      Write to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n6.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n9. list_agents: List
      GPT Agents, args: () -> str\n10. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n11. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n12.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nAs
      a system, I recall that nothing new has happened since my creation."}, {"role":
      "user", "content": "Determine which next command to use, and respond using the
      format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I should start by reading the instructions_1.txt file
      using the read_file command.\",\n        \"reasoning\": \"The first step is
      to understand the instructions and what is required of me.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_1.txt file\\n- Analyze
      the instructions and determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I understand the instructions fully before proceeding.\",\n        \"speak\":
      \"I will start by reading the instructions file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: This task_id is 2314\nRead the file instructions_2.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_2.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_2.txt file
      contains further instructions that I need to follow.\",\n        \"plan\": \"-
      Use the read_file command to read the instructions_2.txt file\\n- Analyze the
      instructions and determine the next steps\",\n        \"criticism\": \"I need
      to ensure that I understand the instructions fully before proceeding.\",\n        \"speak\":
      \"I will read the instructions_2.txt file now.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_2.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Read the file instructions_3.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_3.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_3.txt file
      contains further instructions that I need to follow.\",\n        \"plan\": \"-
      Use the read_file command to read the instructions_3.txt file\\n- Analyze the
      instructions and determine the next steps\",\n        \"criticism\": \"I need
      to ensure that I understand the instructions fully before proceeding.\",\n        \"speak\":
      \"I will read the instructions_3.txt file now.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_3.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Write the task_id
      into the file output.txt\nShutdown"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6394'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA5RSTa+bMBC891dYezYohPfyKLdWaqX00FO/1FJFjtmAX7CXZy9NpIj/XhGIkkfV
        Q64z3pnZ9ZzAlJCDrhVr2zbR06fn7XL3LbE/Pn74Xr2zCj/z+/XLzzb8yTKQQNtn1DxNxJps2yAb
        ciBBe1SMJeTJKnt4mz5lq4UESyU2kEPVcpTGjxF3fkvRIl0kIKELqkLIT9B6si1vmPboAuRJusok
        XMWvxGMmgYlVcwMtV70EXZPRGCD/dQKL4SLsqUHIQYVgAivHQ0xyjG5Y4VQ4IYQogGvqqppDAbmY
        wInAIw9gAWvhEEvBJA7eMAquUbAK+40phXFMZ4A6bjuO+chiZxoUXTCuOjPnoQ3T5oxrsla5Mi5A
        3rp5VIGccdVo+aVGYVxg3+nhCEF4fOmMR2Hxvhxzn7ZRbrSIxNeA/w94n83MRXvDRptg5wdEFzo/
        SCoW6xt9Td6j5rvXCS2q/cXkYJrmni9ydIgLGOV6eSnEtP8/fXDK4uj06l6zQMpX8yqNxPD2KnGN
        8mp+3rxlmjxcEp5TTmEL10MvYWecCfVm7A7kEJhakGBciUfIF/3v/s1fAAAA//8DAF4b24zkAwAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7cc629de3bf83ac7-DFW
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 24 May 2023 14:18:10 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '29389'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '86466'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.355s
      x-request-id:
      - c74448d89d195cfad9d7fcfc8ed151c4
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\nThe
      OS you are running on is: Ubuntu 22.04.2 LTS\n\nGOALS:\n\n1. Use the command
      read_file to read the instructions_1.txt file\n2. Follow the instructions in
      the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word limit for short
      term memory. Your short term memory is short, so immediately save important
      information to files.\n2. If you are unsure how you previously did something
      or want to recall past events, thinking about similar events will help you remember.\n3.
      No user assistance\n4. Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n2. delete_file: Delete file, args: \"filename\": \"<filename>\"\n3.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n4.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n5. write_to_file:
      Write to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n6.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n9. list_agents: List
      GPT Agents, args: () -> str\n10. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n11. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n12.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nAs
      a system, I recall that nothing new has happened since my creation."}, {"role":
      "user", "content": "Determine which next command to use, and respond using the
      format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I should start by reading the instructions_1.txt file
      using the read_file command.\",\n        \"reasoning\": \"The first step is
      to understand the instructions and what is required of me.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_1.txt file\\n- Analyze
      the instructions and determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I understand the instructions fully before proceeding.\",\n        \"speak\":
      \"I will start by reading the instructions file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: This task_id is 2314\nRead the file instructions_2.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_2.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_2.txt file
      contains further instructions that I need to follow.\",\n        \"plan\": \"-
      Use the read_file command to read the instructions_2.txt file\\n- Analyze the
      instructions and determine the next steps\",\n        \"criticism\": \"I need
      to ensure that I understand the instructions fully before proceeding.\",\n        \"speak\":
      \"I will read the instructions_2.txt file now.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_2.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Read the file instructions_3.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_3.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_3.txt file
      contains further instructions that I need to follow.\",\n        \"plan\": \"-
      Use the read_file command to read the instructions_3.txt file\\n- Analyze the
      instructions and determine the next steps\",\n        \"criticism\": \"I need
      to ensure that I understand the instructions fully before proceeding.\",\n        \"speak\":
      \"I will read the instructions_3.txt file now.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_3.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Write the task_id
      into the file output.txt\nShutdown"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I need to write the task_id into the output.txt file using the write_to_file
      command.\",\n        \"reasoning\": \"The instructions require me to write the
      task_id into the output.txt file.\",\n        \"plan\": \"- Use the write_to_file
      command to write the task_id into the output.txt file\",\n        \"criticism\":
      \"I need to ensure that I write the correct task_id into the output.txt file.\",\n        \"speak\":
      \"I will write the task_id into the output.txt file now.\"\n    },\n    \"command\":
      {\n        \"name\": \"write_to_file\",\n        \"args\": {\n            \"filename\":
      \"output.txt\",\n            \"text\": \"2314\"\n        }\n    }\n}"}, {"role":
      "system", "content": "Command write_to_file returned: File written to successfully."},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '7348'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA3SRS2/bMBCE7/0VxJ4pw684jm4FiiIpgp5aoEUVGDS1lhjzoXJXsQ1D/73Qw7Wr
        ttdd8puZnTOYHFLQpWLtKpvcf3rdfv84f36c7ec791hV+Pl5efx2evuwPEWQELavqHn4MdHBVRbZ
        BA8SdETFmEM6W62XD4v79cNcggs5WkihqDhZTO4SruM2JNPFdAYSalIFQnqGKgZX8YbDHj1BOrtb
        rSVc4dfFbCWBAyt7Ha3Wy0aCLoPRSJD+OINDuoBjsAgpKCJDrDy3NoNn9G2Ec+aFECIDLkNdlEwZ
        pGIYDgs8cjvM4El4xFxwEFTWnIeDFzUZXwguUbCi/Wawi0IH55TPJxnIW1ZERcEbX/TALyUK44lj
        rduIJCL+rE1E4fBWZUyprPI9IBFfCf8vfwsZMXQ0bLQhN46GnurYMhWLJ1Gqt47WYXOhrO3UBp95
        J0tii7sQsZPi9h7/Mk0Vqv1F7GCsvR7Rh8Mkg/5xIy+FDBn+6sMrhz3nj8wjORWLcZW3FfSA922c
        LsE1ItVaI9Gutvb021XnbDCY+QYaCTvjDZWbHgcpEIcKJBif4xHSafPSvPsFAAD//wMAvNN1YlgD
        AAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7cc62aa52e403ac7-DFW
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 24 May 2023 14:18:31 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '19007'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '86473'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.35s
      x-request-id:
      - d281dd2fbae62c2925a71cdef320242e
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Write
      a concise summary of the following text:\n\n\nLITERAL TEXT: \"\"\"This task_id
      is 2314 Read the file instructions_2.txt\"\"\"\n\n\nCONCISE SUMMARY: The text
      is best summarized as"}], "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '294'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0SOwUvDMBhH7/4V4XdOS7tu7cxRvQxRcAcvIiNNv61xadIlX3Ew+r/LQOf1wXu8
        C2wHBdNrNsPosua5OW3Ob8fHFyppen/Y3m/3zakh99pWCRKh/SLDv0ZuwjA6Yhs8JEwkzdRBlfV6
        VVRlUS8khtCRg8Jh5KzKVxlPsQ1ZURUlJKakDwR1wRjDMPKOw5F8glquJf7TN1zWEhxYuxupl7OE
        6YM1lKA+Lhgo/TVjcAQFnZJNrD1fD4Nn8td7LVino/i23IvNk1hU5VJwEJF0J7gnsbeOhPWJ42Su
        D2m3yPnMOWaJvfU29btIOgUPhcRhhIT1HZ2hivlzvvsBAAD//wMAbCMLS1YBAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7ccf0d4a6d710e87-AMS
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 May 2023 16:11:04 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - user-kd1j0bcill5flig1m29wdaof
      openai-processing-ms:
      - '2415'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '89455'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 362ms
      x-request-id:
      - cbd67969e330d7c1b72b91be6aff147a
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["This task_id is 2314 Read the file instructions_2.txt"], "model":
      "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '132'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7ccf0d5b8d510e87-AMS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 May 2023 16:11:05 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-organization:
      - user-kd1j0bcill5flig1m29wdaof
      openai-processing-ms:
      - '145'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3000'
      x-ratelimit-remaining-requests:
      - '2999'
      x-ratelimit-reset-requests:
      - 20ms
      x-request-id:
      - 7ab0c4c9a66ac01fa308ec0a4b3afb51
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "a task with ID 2314 to read the file instructions_2.txt.", "model":
      "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '133'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        5/+9/q/l2/7zX/8FAAD//wMAQjx+2uMgAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7ccf0d5f1a480e87-AMS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 May 2023 16:11:05 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-organization:
      - user-kd1j0bcill5flig1m29wdaof
      openai-processing-ms:
      - '34'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3000'
      x-ratelimit-remaining-requests:
      - '2999'
      x-ratelimit-reset-requests:
      - 20ms
      x-request-id:
      - d9fc6937ceb4be70e1e66bfec2a69b1d
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file to determine what actions
      to take next.\",\n        \"reasoning\": \"The instructions_1.txt file contains
      the necessary information to determine the next steps.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_1.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will start by reading the instructions_1.txt file to determine the next
      steps.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: This task_id is 2314\nRead
      the file instructions_2.txt"}, {"role": "user", "content": "Determine which
      next command to use, and respond using the format specified above:"}], "temperature":
      0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4429'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4SST2/aQBDF7/0UoznbCAfFpL710KgIVeqhraLWEdqsB7zNetbdHRco4rtXa0OI
        QCXX+fd+b/ft0FRYoK6V6Ka16XQ+/f35ezZVHf95+PhwP6/m60/T/O7Hl/v5GBN0T79Iy2FjpF3T
        WhLjGBPUnpRQhUWW392OJ9k4zxNsXEUWC1y1kk5Gt6l0/sml48k4wwS7oFaExQ5b75pWFuKeiQMW
        7/MswdPtl3qWTxMUJ8qeStnN3T5BXTujKWDxc4cNheNd7yxhgSoEE0SxRErHQhwd7EoGAChRatet
        agklFnAoHhq0kVgs8WtNwLQRMBzEdzpigQkgDjypCqSm162wuBnJRmBpLI1gBqF2na2gC9RPxpVF
        7IF2TaO4incqB1KbMCoxec3gSQXHhlcnkP8IQbSmDAdQVWViV1kwvHS+UT2v1EoiNJOOT+S3vSwJ
        +cbwQNZ7DELtBUdrFQ8IKXy75uOt9yhLTuEDK7v9Sxdz14jOgLQ3YrQJzUA1AybqAYhD52lwOwPV
        wNJZ69aGV5dySuvOKyG7hYhPy6XRhljs9tx/aEk9H6XWxtrrv/lmKkocru+TYwwP2xcpZNXQIPyi
        dMam/Oo8vEMjzp7WL1GOED3IgafkPe4TXBo2oV4M8cMCg7gWEzRc0QaL8f5x/+4fAAAA//8DAAZm
        Y9w8BAAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7ccf0d64a9660e87-AMS
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 May 2023 16:11:28 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - user-kd1j0bcill5flig1m29wdaof
      openai-processing-ms:
      - '22145'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '85989'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.674s
      x-request-id:
      - ed28311acec7dc54b88da3bcb013fd1f
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Write
      a concise summary of the following text:\n\n\nLITERAL TEXT: \"\"\"Read the file
      instructions_3.txt\"\"\"\n\n\nCONCISE SUMMARY: The text is best summarized as"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '273'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0yOQU8CMRSE7/6KZs7dza4Lgj2ayEFvHiRRDCndt1Dd7SvtI4GQ/e+GRNHrZOab
        7wzfwsDtrLgh9sXsebbvT6dXdouXLjlaxvnt0/Jxv3g4vs2hwZtPcvKzKB0PsSfxHKDhElmhFqa+
        m0+rpq7ua42BW+phsI1SNOW0kEPacFE1VQ2NQ7ZbgjkjJh6irIW/KGSYSa3xh77GdaMhLLa/JtPJ
        qOF27B1lmPczBsq/zMQ9wcDm7LPYIBdDDkLhYm+D8iFLOrjLgxJWiWyrrOp8TyrYgVq1wr9KXjel
        HGWFEqNG54PPu3UimznAIAtHaPjQ0hGmGj/Gm28AAAD//wMAKH14BlkBAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7ccf0e0018ac0e87-AMS
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 May 2023 16:11:33 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - user-kd1j0bcill5flig1m29wdaof
      openai-processing-ms:
      - '1984'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '89461'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 359ms
      x-request-id:
      - fb6f397530dcf4f562dc86bbcff3c693
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["Read the file instructions_3.txt"], "model": "text-embedding-ada-002",
      "encoding_format": "base64"}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '111'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        AP//AwDERdaw4SAAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7ccf0e0e8c8b0e87-AMS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 May 2023 16:11:33 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-organization:
      - user-kd1j0bcill5flig1m29wdaof
      openai-processing-ms:
      - '98'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3000'
      x-ratelimit-remaining-requests:
      - '2999'
      x-ratelimit-reset-requests:
      - 20ms
      x-request-id:
      - 31520529018ec34a92e781fef1a3cd4b
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "an instruction to read a file named \"instructions_3.txt\".",
      "model": "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '136'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        //8DAExnHhbjIAAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7ccf0e10f83a0e87-AMS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 May 2023 16:11:34 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-organization:
      - user-kd1j0bcill5flig1m29wdaof
      openai-processing-ms:
      - '344'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3000'
      x-ratelimit-remaining-requests:
      - '2999'
      x-ratelimit-reset-requests:
      - 20ms
      x-request-id:
      - b276c32257732ffe4c684a28e900f21a
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file to determine what actions
      to take next.\",\n        \"reasoning\": \"The instructions_1.txt file contains
      the necessary information to determine the next steps.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_1.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will start by reading the instructions_1.txt file to determine the next
      steps.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: This task_id is 2314\nRead
      the file instructions_2.txt"}, {"role": "user", "content": "Determine which
      next command to use, and respond using the format specified above:"}, {"role":
      "assistant", "content": "{\n    \"thoughts\": {\n        \"text\": \"The next
      instruction is to read the instructions_2.txt file. I should use the read_file
      command to do this.\",\n        \"reasoning\": \"The instructions_2.txt file
      contains additional information that is necessary to determine the next steps.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_2.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will use the read_file command to read the instructions_2.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_2.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: Read the file instructions_3.txt"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '5471'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4SSQW/bMAyF7/sVBM9OEMNL0/m2ww5ZTxu6QzEPgSrTsRaJ8iQaTRrkvw+yk6VI
        sPTKR/J9T+IeTY0l6laJdp2dLB4Wf7qH7/Vm5wpxX77lze4pPL3OvraPH+8xQ//8m7QcJ6bau86S
        GM+YoQ6khGos87v7+azIZ5/mGTpfk8US151Miul8In149pNZMcsxwz6qNWG5xy5418lK/IY4Ypnn
        izzD8/KzcLfIULwoey4Vxf0hQ916oyli+XOPjuJpcfCWsEQVo4miWBKmZyFOEfYVAwBUKK3v163E
        Cks4Fo8CbSUVK3xsCZi2AoajhF4nLDARxEMgVYO09FaKq2IqW4HGWJrCEmLre1tDH2noTCOrpIH2
        zimu057ag7QmTivM3jIEUtGz4fUZ5D9GkKIpwxFUXZukKguGGx+cGnilVZKgmXR6orAbbEkoOMMj
        2ZAxCnVXHJ1VPCJM4MetHO+9R1XxBD6zsrtXuuq7RXQBpIMRo010I9USmGgAII59oDHtEpSDxlvr
        Xwyvr+2U1n1QQnYHCZ+axmhDLHZ3mT92pDYnqxdj7e3ffPcqKhy3H7LTGR6nr66QlaPR+J/TBZsK
        68vjHYXUex6/RjlBDCBHnooPeMiwMWxiuxrPD0uM4jvM0HBNWyxnh1+HD38BAAD//wMA/Hf7rD0E
        AAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7ccf0e1859ff0e87-AMS
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 May 2023 16:11:55 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - user-kd1j0bcill5flig1m29wdaof
      openai-processing-ms:
      - '19899'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '85977'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.681s
      x-request-id:
      - bf918edc6b187c6674844c12a530a87f
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Write
      a concise summary of the following text:\n\n\nLITERAL TEXT: \"\"\"Write the
      task_id into the file output.txt Shutdown\"\"\"\n\n\nCONCISE SUMMARY: The text
      is best summarized as"}], "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '292'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0SOPWvDMBRF9/4KcWfZ2HU+Go0dWzK0WyklKNJLrMbWE9IzCQT/9xJo0/Vw7+Fc
        ETwMXG/FjWmo1q/r/OxPm4/Lxr/57bkj2ry321Xv04tAg/ff5OT3UTse00ASOELDZbJCHqZdPS2b
        rm3btcbIngYYHJNUXb2sZMp7rpquaaExFXskmCtS5jHJTvhEscAsFhr/6jtunzSExQ53snqcNVzP
        wVGB+bxipPLnzDwQDGwpoYiNt3jHUSje6kMskicnIR6VsDrnIKSkJyW2nHbBqxCFlVWHMJCKdiSv
        eJI0SS0XUTb62ziq0k/i+RxrzBqHEEPpd5ls4QiDIpygEaKnC0wzf80PPwAAAP//AwB6sgsgbgEA
        AA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7ccf0ea56fbe0e87-AMS
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 May 2023 16:12:00 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - user-kd1j0bcill5flig1m29wdaof
      openai-processing-ms:
      - '2608'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '89455'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 362ms
      x-request-id:
      - e259d501a74191db07fd355eaf220f71
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["Write the task_id into the file output.txt Shutdown"], "model":
      "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '130'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        Y33bf/7j/wEAAP//AwDnoBEa4yAAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7ccf0eb7c9ce0e87-AMS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 May 2023 16:12:00 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-organization:
      - user-kd1j0bcill5flig1m29wdaof
      openai-processing-ms:
      - '198'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3000'
      x-ratelimit-remaining-requests:
      - '2999'
      x-ratelimit-reset-requests:
      - 20ms
      x-request-id:
      - 80a4469d300125c88220afe807df5245
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "instructing to write the task_id into a file named output.txt
      and then shutdown.", "model": "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '157'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7ccf0ebb6e6c0e87-AMS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 May 2023 16:12:01 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-organization:
      - user-kd1j0bcill5flig1m29wdaof
      openai-processing-ms:
      - '93'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3000'
      x-ratelimit-remaining-requests:
      - '2999'
      x-ratelimit-reset-requests:
      - 20ms
      x-request-id:
      - d89231f4f1f1f2564d1e61aa629b1e87
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file to determine what actions
      to take next.\",\n        \"reasoning\": \"The instructions_1.txt file contains
      the necessary information to determine the next steps.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_1.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will start by reading the instructions_1.txt file to determine the next
      steps.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: This task_id is 2314\nRead
      the file instructions_2.txt"}, {"role": "user", "content": "Determine which
      next command to use, and respond using the format specified above:"}, {"role":
      "assistant", "content": "{\n    \"thoughts\": {\n        \"text\": \"The next
      instruction is to read the instructions_2.txt file. I should use the read_file
      command to do this.\",\n        \"reasoning\": \"The instructions_2.txt file
      contains additional information that is necessary to determine the next steps.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_2.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will use the read_file command to read the instructions_2.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_2.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: Read the file instructions_3.txt"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"The next instruction is to read the instructions_3.txt file. I should use
      the read_file command to do this.\",\n        \"reasoning\": \"The instructions_3.txt
      file contains additional information that is necessary to determine the next
      steps.\",\n        \"plan\": \"- Use the read_file command to read the instructions_3.txt
      file\\n- Analyze the instructions to determine the next steps\",\n        \"criticism\":
      \"I need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will use the read_file command to read the instructions_3.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_3.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: Write the task_id into the file output.txt\nShutdown"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6533'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA5STQW/bMAyF7/sVBM9OENdN0/laDEOww4C1u2weAkWmYy22KEj0mi3Ifx8kJ0ub
        oeh2JcXH7z3TezQ1lqhbJbp33WTxYeHfF9f3+cc7I/pTJ/dz99h8eSd3i18FZsjr76TlODHV3LuO
        xLDFDLUnJVRjmd/czmdFnl9dZdhzTR2WuHEyKabziQx+zZNZMcsxwyGoDWG5R+e5d7IS3pINWObF
        7TzDs/i58TbPUFhUdy7NFzeHDHXLRlPA8useewonYc8dYYkqBBNEWYmYbIVstLCvLABAhdLysGkl
        VFjCsXhs0E5iscKHlsDSTsDYIH7QEQtMAGF49EYIpCUQFbYrU4OxwqnQmI6AB3GDTGUnU1hCaHno
        ahjCOJKGV8Kr9FRz3ytbR9U6KpgwrTB7SuRJBbbGbs5Yf7YGML1jH32CsQ37XiVMaZWAJaoT7pog
        qB9UQ8MemkEGT+CpIU9W0xQeXoSKblsC5Zxn542SZ7zJECfpBP6U4NKE65Qd+Sfw+bUg/j3eiy3a
        GzHahH5ctUwRREWyIZpOsSxB9TAEYzdJUbP3pCUpW9UTJIj4UJ4nHamELCitB6+Eup+XJoMjtT2t
        fjRd9/o3/49LqnDcdchOR3zU+euGo40R49neC1rlN5fnPzZOSYwSL4R9+bdcFfn1iTBRHmEre8BD
        ho2xJrSr8ZaxxCDsMENja9phOTt8O7z5DQAA//8DAM1HwReYBAAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7ccf0ec52c770e87-AMS
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 May 2023 16:12:38 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - user-kd1j0bcill5flig1m29wdaof
      openai-processing-ms:
      - '35172'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '85965'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.69s
      x-request-id:
      - 4deceb10a720ed511946892120663449
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file to determine what actions
      to take next.\",\n        \"reasoning\": \"The instructions_1.txt file contains
      the necessary information to determine the next steps.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_1.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will start by reading the instructions_1.txt file to determine the next
      steps.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: This task_id is 2314\nRead
      the file instructions_2.txt"}, {"role": "user", "content": "Determine which
      next command to use, and respond using the format specified above:"}, {"role":
      "assistant", "content": "{\n    \"thoughts\": {\n        \"text\": \"The next
      instruction is to read the instructions_2.txt file. I should use the read_file
      command to do this.\",\n        \"reasoning\": \"The instructions_2.txt file
      contains additional information that is necessary to determine the next steps.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_2.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will use the read_file command to read the instructions_2.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_2.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: Read the file instructions_3.txt"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"The next instruction is to read the instructions_3.txt file. I should use
      the read_file command to do this.\",\n        \"reasoning\": \"The instructions_3.txt
      file contains additional information that is necessary to determine the next
      steps.\",\n        \"plan\": \"- Use the read_file command to read the instructions_3.txt
      file\\n- Analyze the instructions to determine the next steps\",\n        \"criticism\":
      \"I need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will use the read_file command to read the instructions_3.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_3.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: Write the task_id into the file output.txt\nShutdown"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"The next instruction is to write the task_id into the
      file output.txt. I should use the write_to_file command to do this.\",\n        \"reasoning\":
      \"The task_id is important information that needs to be saved for future reference.
      The write_to_file command is the appropriate command to use to save this information.\",\n        \"plan\":
      \"- Use the write_to_file command to write the task_id into the file output.txt\",\n        \"criticism\":
      \"I need to ensure that I am using the correct filename and that the task_id
      is written accurately.\",\n        \"speak\": \"I will use the write_to_file
      command to write the task_id into the file output.txt.\"\n    },\n    \"command\":
      {\n        \"name\": \"write_to_file\",\n        \"args\": {\n            \"filename\":
      \"output.txt\",\n            \"text\": \"2314\"\n        }\n    }\n}"}, {"role":
      "system", "content": "Command write_to_file returned: File written to successfully."},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '7667'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA5ySwW7bMAyG73sKgmclcJalyXxL0UuwU7cVKDYXgSIzthpZMkR6aRH43QfHTpNl
        wwbsSorf90viAW2OKZpSi6lqN5p/msfm4Xb2OdnfJY8fc9bfbu+Xy7v75jE+o8KweSYjw8TYhKp2
        JDZ4VGgiaaEc08nNYpZMJ5Ob9wqrkJPDFItaRtPxbCRN3IRRMk0mqLBhXRCmB6xjqGpZS9iR5w4w
        WSg8w8+ND4lCCaLduTSfLVqFpgzWEGP6/YAV8QkcgyNMUTNbFu2lixm8kO+ucMg8AECGUoamKIUz
        TGEoDg16ka6Y4deSIoGOBD7AtolSUgTrWWJjuogM1oOUBFvriMewAi5D43LgshHIw77v8isLVeMM
        1aUmkubgrS961xfrDXXH/25UF8STbUNn4bWldtr3ghE88FEAonm3Hh6awISq0j4HCX+MfcUz0Yo1
        lqseugJPdJwlz03s+FpgBaX+cSQfFTlo58CT6b4ovh79DBvahtgnF+uLfz0X16R3J+neOgfN/1xn
        nGFPbdVpEYaJ3/bA64p64S+Gq1w6FtcrdPm/PWDp3HDrtzd5C3IMM2TKfIutwq31lst1T8AUWUKN
        Cq3P6QXTpH1q3/0EAAD//wMA01DJjcMDAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7ccf0fbacd3c0e87-AMS
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 May 2023 16:13:01 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - user-kd1j0bcill5flig1m29wdaof
      openai-processing-ms:
      - '18813'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '85954'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.697s
      x-request-id:
      - dc2b7bf8c23ae0ae192ddd1aec0cfcce
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Write
      a concise summary of the following text:\n\n\nLITERAL TEXT: \"\"\"2314\"\"\"\n\n\nCONCISE
      SUMMARY: The text is best summarized as"}], "temperature": 0, "max_tokens":
      0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '245'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0SOzUrDQBRG9z5F+NaTkmn6k87WIojoSkWwUiaT22Y0mRtmbqRQ8u5S0Lo9cA7n
        DN/AwLVWXD90+fphne6+N9vX09vjve2K7Xxzq9vmuTo+vVRQ4PqTnPwaM8f90JF4DlBwkaxQA6NX
        1bIota5KhZ4b6mBwHCQvZ8tcxlhzXpSFhsKY7JFgzhgi94Pshb8oJJhypfCfvmJdKAiL7a5ksZoU
        XMveUYJ5P6On9NeM3BEMbEo+iQ1yOeQgFC73NksUPaWMD9mBx5iFsa8pJpXtMC/1YocZJoWDDz61
        +0g2cYBBEh6g4ENDJ5hi+phufgAAAP//AwBfxEKlQQEAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7ccf1041c95b0e87-AMS
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 May 2023 16:13:05 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - user-kd1j0bcill5flig1m29wdaof
      openai-processing-ms:
      - '1459'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '89467'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 354ms
      x-request-id:
      - fe47594a98343f9b1fdd96e8f24e6452
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["2314"], "model": "text-embedding-ada-002", "encoding_format":
      "base64"}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '83'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7ccf104d49840e87-AMS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 May 2023 16:13:05 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-organization:
      - user-kd1j0bcill5flig1m29wdaof
      openai-processing-ms:
      - '55'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3000'
      x-ratelimit-remaining-requests:
      - '2999'
      x-ratelimit-reset-requests:
      - 20ms
      x-request-id:
      - 4cd85160067d0d527e19b56e53ae0bde
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "a series of four numbers, \"2314\".", "model": "text-embedding-ada-002",
      "encoding_format": "base64"}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '112'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        z7LCz+MgAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7ccf104fccb00e87-AMS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 May 2023 16:13:06 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-organization:
      - user-kd1j0bcill5flig1m29wdaof
      openai-processing-ms:
      - '281'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3000'
      x-ratelimit-remaining-requests:
      - '2999'
      x-ratelimit-reset-requests:
      - 20ms
      x-request-id:
      - 72e87778cddd5419581d415a082f3a4e
    status:
      code: 200
      message: OK
version: 1
